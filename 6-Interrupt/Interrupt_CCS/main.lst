CCS PCM C Compiler, Version 5.048, 5967               22-ге-16 15:04

               Filename:   G:\learning\Micochip\Projects\6-Interrupt\Interrupt_CCS\main.lst

               ROM used:   944 words (12%)
                           Largest free fragment is 2048
               RAM used:   18 (5%) at main() level
                           44 (12%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   31F
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.5
001A:  GOTO   01D
001B:  BTFSC  0C.5
001C:  GOTO   02E
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   20,W
0028:  MOVWF  0A
0029:  SWAPF  21,W
002A:  MOVWF  03
002B:  SWAPF  7F,F
002C:  SWAPF  7F,W
002D:  RETFIE
002E:  BCF    0A.3
002F:  BCF    0A.4
0030:  GOTO   039
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0031:  BCF    0A.0
0032:  BCF    0A.1
0033:  BCF    0A.2
0034:  ADDWF  02,F
0035:  RETLW  28
0036:  RETLW  0C
0037:  RETLW  01
0038:  RETLW  06
*
0114:  MOVLW  8E
0115:  MOVWF  77
0116:  MOVF   2E,W
0117:  MOVWF  78
0118:  MOVF   2D,W
0119:  MOVWF  79
011A:  CLRF   7A
011B:  MOVF   78,F
011C:  BTFSS  03.2
011D:  GOTO   128
011E:  MOVF   79,W
011F:  MOVWF  78
0120:  CLRF   79
0121:  MOVLW  08
0122:  SUBWF  77,F
0123:  MOVF   78,F
0124:  BTFSS  03.2
0125:  GOTO   128
0126:  CLRF   77
0127:  GOTO   130
0128:  BCF    03.0
0129:  BTFSC  78.7
012A:  GOTO   12F
012B:  RLF    79,F
012C:  RLF    78,F
012D:  DECF   77,F
012E:  GOTO   128
012F:  BCF    78.7
0130:  RETURN
*
017D:  BTFSC  03.1
017E:  GOTO   182
017F:  MOVLW  42
0180:  MOVWF  04
0181:  BCF    03.7
0182:  CLRF   77
0183:  CLRF   78
0184:  CLRF   79
0185:  CLRF   7A
0186:  CLRF   42
0187:  CLRF   43
0188:  CLRF   44
0189:  CLRF   45
018A:  MOVF   41,W
018B:  IORWF  40,W
018C:  IORWF  3F,W
018D:  IORWF  3E,W
018E:  BTFSC  03.2
018F:  GOTO   1C0
0190:  MOVLW  20
0191:  MOVWF  46
0192:  BCF    03.0
0193:  RLF    3A,F
0194:  RLF    3B,F
0195:  RLF    3C,F
0196:  RLF    3D,F
0197:  RLF    42,F
0198:  RLF    43,F
0199:  RLF    44,F
019A:  RLF    45,F
019B:  MOVF   41,W
019C:  SUBWF  45,W
019D:  BTFSS  03.2
019E:  GOTO   1A9
019F:  MOVF   40,W
01A0:  SUBWF  44,W
01A1:  BTFSS  03.2
01A2:  GOTO   1A9
01A3:  MOVF   3F,W
01A4:  SUBWF  43,W
01A5:  BTFSS  03.2
01A6:  GOTO   1A9
01A7:  MOVF   3E,W
01A8:  SUBWF  42,W
01A9:  BTFSS  03.0
01AA:  GOTO   1BA
01AB:  MOVF   3E,W
01AC:  SUBWF  42,F
01AD:  MOVF   3F,W
01AE:  BTFSS  03.0
01AF:  INCFSZ 3F,W
01B0:  SUBWF  43,F
01B1:  MOVF   40,W
01B2:  BTFSS  03.0
01B3:  INCFSZ 40,W
01B4:  SUBWF  44,F
01B5:  MOVF   41,W
01B6:  BTFSS  03.0
01B7:  INCFSZ 41,W
01B8:  SUBWF  45,F
01B9:  BSF    03.0
01BA:  RLF    77,F
01BB:  RLF    78,F
01BC:  RLF    79,F
01BD:  RLF    7A,F
01BE:  DECFSZ 46,F
01BF:  GOTO   192
01C0:  MOVF   42,W
01C1:  MOVWF  00
01C2:  INCF   04,F
01C3:  MOVF   43,W
01C4:  MOVWF  00
01C5:  INCF   04,F
01C6:  MOVF   44,W
01C7:  MOVWF  00
01C8:  INCF   04,F
01C9:  MOVF   45,W
01CA:  MOVWF  00
01CB:  RETURN
01CC:  MOVF   04,W
01CD:  MOVWF  32
01CE:  MOVF   31,W
01CF:  MOVWF  34
01D0:  BTFSC  03.2
01D1:  GOTO   25E
01D2:  MOVF   30,W
01D3:  MOVWF  3D
01D4:  MOVF   2F,W
01D5:  MOVWF  3C
01D6:  MOVF   2E,W
01D7:  MOVWF  3B
01D8:  MOVF   2D,W
01D9:  MOVWF  3A
01DA:  CLRF   41
01DB:  CLRF   40
01DC:  MOVLW  20
01DD:  MOVWF  3F
01DE:  MOVLW  82
01DF:  MOVWF  3E
01E0:  MOVF   3A,W
01E1:  BTFSC  03.2
01E2:  GOTO   250
01E3:  MOVWF  42
01E4:  MOVF   3E,W
01E5:  BTFSC  03.2
01E6:  GOTO   250
01E7:  ADDWF  42,F
01E8:  BTFSC  03.0
01E9:  GOTO   1F1
01EA:  MOVLW  7F
01EB:  SUBWF  42,F
01EC:  BTFSS  03.0
01ED:  GOTO   250
01EE:  BTFSC  03.2
01EF:  GOTO   250
01F0:  GOTO   1F5
01F1:  MOVLW  81
01F2:  ADDWF  42,F
01F3:  BTFSC  03.0
01F4:  GOTO   250
01F5:  MOVF   42,W
01F6:  MOVWF  77
01F7:  CLRF   78
01F8:  CLRF   79
01F9:  CLRF   7A
01FA:  MOVF   3B,W
01FB:  MOVWF  46
01FC:  BSF    46.7
01FD:  MOVF   3C,W
01FE:  MOVWF  45
01FF:  MOVF   3D,W
0200:  MOVWF  44
0201:  MOVLW  18
0202:  MOVWF  42
0203:  CLRF   43
0204:  BTFSS  44.0
0205:  GOTO   21E
0206:  MOVF   41,W
0207:  ADDWF  7A,F
0208:  BTFSS  03.0
0209:  GOTO   210
020A:  INCF   79,F
020B:  BTFSS  03.2
020C:  GOTO   210
020D:  INCF   78,F
020E:  BTFSC  03.2
020F:  BSF    43.7
0210:  MOVF   40,W
0211:  ADDWF  79,F
0212:  BTFSS  03.0
0213:  GOTO   217
0214:  INCF   78,F
0215:  BTFSC  03.2
0216:  BSF    43.7
0217:  MOVF   3F,W
0218:  MOVWF  3C
0219:  BSF    3C.7
021A:  MOVF   3C,W
021B:  ADDWF  78,F
021C:  BTFSC  03.0
021D:  BSF    43.7
021E:  RLF    43,F
021F:  RRF    78,F
0220:  RRF    79,F
0221:  RRF    7A,F
0222:  RRF    46,F
0223:  RRF    45,F
0224:  RRF    44,F
0225:  BCF    03.0
0226:  DECFSZ 42,F
0227:  GOTO   203
0228:  MOVLW  01
0229:  ADDWF  77,F
022A:  BTFSC  03.0
022B:  GOTO   250
022C:  BTFSC  78.7
022D:  GOTO   235
022E:  RLF    46,F
022F:  RLF    7A,F
0230:  RLF    79,F
0231:  RLF    78,F
0232:  DECF   77,F
0233:  BTFSC  03.2
0234:  GOTO   250
0235:  BTFSS  46.7
0236:  GOTO   246
0237:  INCF   7A,F
0238:  BTFSS  03.2
0239:  GOTO   246
023A:  INCF   79,F
023B:  BTFSS  03.2
023C:  GOTO   246
023D:  INCF   78,F
023E:  BTFSS  03.2
023F:  GOTO   246
0240:  RRF    78,F
0241:  RRF    79,F
0242:  RRF    7A,F
0243:  INCF   77,F
0244:  BTFSC  03.2
0245:  GOTO   250
0246:  MOVF   3B,W
0247:  MOVWF  43
0248:  MOVF   3F,W
0249:  XORWF  43,F
024A:  BTFSS  43.7
024B:  GOTO   24E
024C:  BSF    78.7
024D:  GOTO   254
024E:  BCF    78.7
024F:  GOTO   254
0250:  CLRF   77
0251:  CLRF   78
0252:  CLRF   79
0253:  CLRF   7A
0254:  MOVF   7A,W
0255:  MOVWF  30
0256:  MOVF   79,W
0257:  MOVWF  2F
0258:  MOVF   78,W
0259:  MOVWF  2E
025A:  MOVF   77,W
025B:  MOVWF  2D
025C:  DECFSZ 34,F
025D:  GOTO   1D2
025E:  MOVF   30,W
025F:  MOVWF  3D
0260:  MOVF   2F,W
0261:  MOVWF  3C
0262:  MOVF   2E,W
0263:  MOVWF  3B
0264:  MOVF   2D,W
0265:  MOVWF  3A
0266:  MOVF   3A,W
0267:  SUBLW  B6
0268:  MOVWF  3A
0269:  CLRF   7A
026A:  MOVF   3B,W
026B:  MOVWF  3E
026C:  BSF    3B.7
026D:  BCF    03.0
026E:  RRF    3B,F
026F:  RRF    3C,F
0270:  RRF    3D,F
0271:  RRF    7A,F
0272:  RRF    79,F
0273:  RRF    78,F
0274:  RRF    77,F
0275:  DECFSZ 3A,F
0276:  GOTO   26D
0277:  BTFSS  3E.7
0278:  GOTO   284
0279:  COMF   77,F
027A:  COMF   78,F
027B:  COMF   79,F
027C:  COMF   7A,F
027D:  INCF   77,F
027E:  BTFSC  03.2
027F:  INCF   78,F
0280:  BTFSC  03.2
0281:  INCF   79,F
0282:  BTFSC  03.2
0283:  INCF   7A,F
0284:  MOVF   7A,W
0285:  MOVWF  30
0286:  MOVF   79,W
0287:  MOVWF  2F
0288:  MOVF   78,W
0289:  MOVWF  2E
028A:  MOVF   77,W
028B:  MOVWF  2D
028C:  BTFSS  30.7
028D:  GOTO   29B
028E:  DECF   32,F
028F:  BSF    32.5
0290:  COMF   2D,F
0291:  COMF   2E,F
0292:  COMF   2F,F
0293:  COMF   30,F
0294:  INCF   2D,F
0295:  BTFSC  03.2
0296:  INCF   2E,F
0297:  BTFSC  03.2
0298:  INCF   2F,F
0299:  BTFSC  03.2
029A:  INCF   30,F
029B:  MOVLW  3B
029C:  MOVWF  39
029D:  MOVLW  9A
029E:  MOVWF  38
029F:  MOVLW  CA
02A0:  MOVWF  37
02A1:  CLRF   36
02A2:  MOVLW  0A
02A3:  MOVWF  34
02A4:  MOVF   31,W
02A5:  BTFSC  03.2
02A6:  INCF   32,F
02A7:  BSF    03.1
02A8:  MOVLW  2D
02A9:  MOVWF  04
02AA:  BCF    03.7
02AB:  MOVF   30,W
02AC:  MOVWF  3D
02AD:  MOVF   2F,W
02AE:  MOVWF  3C
02AF:  MOVF   2E,W
02B0:  MOVWF  3B
02B1:  MOVF   2D,W
02B2:  MOVWF  3A
02B3:  MOVF   39,W
02B4:  MOVWF  41
02B5:  MOVF   38,W
02B6:  MOVWF  40
02B7:  MOVF   37,W
02B8:  MOVWF  3F
02B9:  MOVF   36,W
02BA:  MOVWF  3E
02BB:  CALL   17D
02BC:  MOVF   78,W
02BD:  MOVF   77,F
02BE:  BTFSS  03.2
02BF:  GOTO   2D3
02C0:  INCF   31,W
02C1:  SUBWF  34,W
02C2:  BTFSC  03.2
02C3:  GOTO   2D3
02C4:  MOVF   32,W
02C5:  BTFSC  03.2
02C6:  GOTO   2D5
02C7:  ANDLW  0F
02C8:  SUBWF  34,W
02C9:  BTFSC  03.2
02CA:  GOTO   2CD
02CB:  BTFSC  03.0
02CC:  GOTO   305
02CD:  BTFSC  32.7
02CE:  GOTO   305
02CF:  BTFSC  32.6
02D0:  GOTO   2D5
02D1:  MOVLW  20
02D2:  GOTO   301
02D3:  MOVLW  20
02D4:  ANDWF  32,F
02D5:  BTFSS  32.5
02D6:  GOTO   2E3
02D7:  BCF    32.5
02D8:  MOVF   31,W
02D9:  BTFSS  03.2
02DA:  DECF   32,F
02DB:  MOVF   77,W
02DC:  MOVWF  32
02DD:  MOVLW  2D
02DE:  MOVWF  3A
02DF:  CALL   156
02E0:  MOVF   32,W
02E1:  MOVWF  77
02E2:  CLRF   32
02E3:  MOVF   31,W
02E4:  SUBWF  34,W
02E5:  BTFSS  03.2
02E6:  GOTO   2F1
02E7:  MOVF   77,W
02E8:  MOVWF  32
02E9:  MOVLW  2E
02EA:  MOVWF  3A
02EB:  CALL   156
02EC:  MOVF   32,W
02ED:  MOVWF  77
02EE:  MOVLW  20
02EF:  ANDWF  32,F
02F0:  MOVLW  00
02F1:  MOVLW  30
02F2:  BTFSS  32.5
02F3:  GOTO   301
02F4:  BCF    32.5
02F5:  MOVF   31,W
02F6:  BTFSS  03.2
02F7:  DECF   32,F
02F8:  MOVF   77,W
02F9:  MOVWF  32
02FA:  MOVLW  2D
02FB:  MOVWF  3A
02FC:  CALL   156
02FD:  MOVF   32,W
02FE:  MOVWF  77
02FF:  CLRF   32
0300:  MOVLW  30
0301:  ADDWF  77,F
0302:  MOVF   77,W
0303:  MOVWF  3A
0304:  CALL   156
0305:  BCF    03.1
0306:  MOVF   39,W
0307:  MOVWF  3D
0308:  MOVF   38,W
0309:  MOVWF  3C
030A:  MOVF   37,W
030B:  MOVWF  3B
030C:  MOVF   36,W
030D:  MOVWF  3A
030E:  CLRF   41
030F:  CLRF   40
0310:  CLRF   3F
0311:  MOVLW  0A
0312:  MOVWF  3E
0313:  CALL   17D
0314:  MOVF   7A,W
0315:  MOVWF  39
0316:  MOVF   79,W
0317:  MOVWF  38
0318:  MOVF   78,W
0319:  MOVWF  37
031A:  MOVF   77,W
031B:  MOVWF  36
031C:  DECFSZ 34,F
031D:  GOTO   2A7
031E:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES WDT                   	//Watch Dog Timer 
....................  
.................... #use delay(crystal=4MHz) 
*
0041:  MOVLW  3B
0042:  MOVWF  04
0043:  BCF    03.7
0044:  MOVF   00,W
0045:  BTFSC  03.2
0046:  GOTO   055
0047:  MOVLW  01
0048:  MOVWF  78
0049:  CLRF   77
004A:  DECFSZ 77,F
004B:  GOTO   04A
004C:  DECFSZ 78,F
004D:  GOTO   049
004E:  MOVLW  4A
004F:  MOVWF  77
0050:  DECFSZ 77,F
0051:  GOTO   050
0052:  GOTO   053
0053:  DECFSZ 00,F
0054:  GOTO   047
0055:  RETURN
....................  
....................  
.................... #include "Flex_LCD420.c" 
.................... // Flex_LCD420.c  
....................  
.................... // These pins are for my Microchip PicDem2-Plus board,  
.................... // which I used to test this driver.  
.................... // An external 20x4 LCD is connected to these pins.  
.................... // Change these pins to match your own board's connections.  
....................  
.................... #define LCD_DB4   PIN_B4 
.................... #define LCD_DB5   PIN_B5  
.................... #define LCD_DB6   PIN_B6  
.................... #define LCD_DB7   PIN_B7  
....................  
.................... #define LCD_RS    PIN_B0  
.................... #define LCD_RW    PIN_B1  
.................... #define LCD_E     PIN_B2  
....................  
.................... /*  
.................... // To prove that the driver can be used with random  
.................... // pins, I also tested it with these pins:  
.................... #define LCD_DB4   PIN_D4  
.................... #define LCD_DB5   PIN_B1  
.................... #define LCD_DB6   PIN_C5  
.................... #define LCD_DB7   PIN_B5  
....................  
.................... #define LCD_RS    PIN_E2  
.................... #define LCD_RW    PIN_B2  
.................... #define LCD_E     PIN_D6  
.................... */  
....................  
.................... // If you want only a 6-pin interface to your LCD, then  
.................... // connect the R/W pin on the LCD to ground, and comment  
.................... // out the following line.  Doing so will save one PIC  
.................... // pin, but at the cost of losing the ability to read from  
.................... // the LCD.  It also makes the write time a little longer  
.................... // because a static delay must be used, instead of polling  
.................... // the LCD's busy bit.  Normally a 6-pin interface is only  
.................... // used if you are running out of PIC pins, and you need  
.................... // to use as few as possible for the LCD.  
.................... #define USE_RW_PIN   1       
....................  
....................  
.................... // These are the line addresses for most 4x20 LCDs.  
.................... #define LCD_LINE_1_ADDRESS 0x00  
.................... #define LCD_LINE_2_ADDRESS 0x40  
.................... #define LCD_LINE_3_ADDRESS 0x14  
.................... #define LCD_LINE_4_ADDRESS 0x54  
....................  
.................... // These are the line addresses for LCD's which use  
.................... // the Hitachi HD66712U controller chip.  
.................... /*  
.................... #define LCD_LINE_1_ADDRESS 0x00  
.................... #define LCD_LINE_2_ADDRESS 0x20  
.................... #define LCD_LINE_3_ADDRESS 0x40  
.................... #define LCD_LINE_4_ADDRESS 0x60  
.................... */  
....................  
....................  
.................... //========================================  
....................  
.................... #define lcd_type 2   // 0=5x7, 1=5x10, 2=2 lines(or more)  
....................  
.................... int8 lcd_line ; 
....................  
.................... int8 const LCD_INIT_STRING[4] =  
.................... {  
....................  0x20 | (lcd_type << 2),  // Set mode: 4-bit, 2+ lines, 5x8 dots  
....................  0xc,                     // Display on  
....................  1,                       // Clear display 
....................  6                        // Increment cursor  
....................  };  
....................                                
....................  
.................... //-------------------------------------  
.................... void lcd_send_nibble(int8 nibble)  
.................... {  
.................... // Note:  !! converts an integer expression  
.................... // to a boolean (1 or 0).  
....................  output_bit(LCD_DB4, !!(nibble & 1));  
0056:  BTFSC  42.0
0057:  GOTO   05A
0058:  BCF    06.4
0059:  GOTO   05B
005A:  BSF    06.4
005B:  BSF    03.5
005C:  BCF    06.4
....................  output_bit(LCD_DB5, !!(nibble & 2));   
005D:  BCF    03.5
005E:  BTFSC  42.1
005F:  GOTO   062
0060:  BCF    06.5
0061:  GOTO   063
0062:  BSF    06.5
0063:  BSF    03.5
0064:  BCF    06.5
....................  output_bit(LCD_DB6, !!(nibble & 4));     
0065:  BCF    03.5
0066:  BTFSC  42.2
0067:  GOTO   06A
0068:  BCF    06.6
0069:  GOTO   06B
006A:  BSF    06.6
006B:  BSF    03.5
006C:  BCF    06.6
....................  output_bit(LCD_DB7, !!(nibble & 8));     
006D:  BCF    03.5
006E:  BTFSC  42.3
006F:  GOTO   072
0070:  BCF    06.7
0071:  GOTO   073
0072:  BSF    06.7
0073:  BSF    03.5
0074:  BCF    06.7
....................  
....................  delay_cycles(1) ; 
0075:  NOP
....................  output_high(LCD_E);  
0076:  BCF    06.2
0077:  BCF    03.5
0078:  BSF    06.2
....................  delay_us(2);  
0079:  GOTO   07A
....................  output_low(LCD_E);  
007A:  BSF    03.5
007B:  BCF    06.2
007C:  BCF    03.5
007D:  BCF    06.2
007E:  RETURN
.................... }  
....................  
.................... //-----------------------------------  
.................... // This sub-routine is only called by lcd_read_byte().  
.................... // It's not a stand-alone routine.  For example, the  
.................... // R/W signal is set high by lcd_read_byte() before  
.................... // this routine is called.       
....................  
.................... #ifdef USE_RW_PIN  
.................... int8 lcd_read_nibble(void)  
.................... {  
.................... int8 retval;  
.................... // Create bit variables so that we can easily set  
.................... // individual bits in the retval variable.  
.................... #bit retval_0 = retval.0  
.................... #bit retval_1 = retval.1  
.................... #bit retval_2 = retval.2  
.................... #bit retval_3 = retval.3  
....................  
.................... retval = 0;  
007F:  CLRF   43
....................      
.................... output_high(LCD_E);  
0080:  BSF    03.5
0081:  BCF    06.2
0082:  BCF    03.5
0083:  BSF    06.2
.................... delay_us(1);  
0084:  NOP
....................  
.................... retval_0 = input(LCD_DB4);  
0085:  BSF    03.5
0086:  BSF    06.4
0087:  BCF    03.5
0088:  BCF    43.0
0089:  BTFSC  06.4
008A:  BSF    43.0
.................... retval_1 = input(LCD_DB5);  
008B:  BSF    03.5
008C:  BSF    06.5
008D:  BCF    03.5
008E:  BCF    43.1
008F:  BTFSC  06.5
0090:  BSF    43.1
.................... retval_2 = input(LCD_DB6);  
0091:  BSF    03.5
0092:  BSF    06.6
0093:  BCF    03.5
0094:  BCF    43.2
0095:  BTFSC  06.6
0096:  BSF    43.2
.................... retval_3 = input(LCD_DB7);  
0097:  BSF    03.5
0098:  BSF    06.7
0099:  BCF    03.5
009A:  BCF    43.3
009B:  BTFSC  06.7
009C:  BSF    43.3
....................    
.................... output_low(LCD_E);  
009D:  BSF    03.5
009E:  BCF    06.2
009F:  BCF    03.5
00A0:  BCF    06.2
.................... delay_us(1);  
00A1:  NOP
....................      
.................... return(retval);     
00A2:  MOVF   43,W
00A3:  MOVWF  78
00A4:  RETURN
.................... }     
.................... #endif  
....................  
.................... //---------------------------------------  
.................... // Read a byte from the LCD and return it.  
....................  
.................... #ifdef USE_RW_PIN  
.................... int8 lcd_read_byte(void)  
.................... {  
.................... int8 low;  
.................... int8 high;  
....................  
.................... output_high(LCD_RW);  
*
00A9:  BSF    03.5
00AA:  BCF    06.1
00AB:  BCF    03.5
00AC:  BSF    06.1
.................... delay_cycles(1);  
00AD:  NOP
....................  
.................... high = lcd_read_nibble();  
00AE:  CALL   07F
00AF:  MOVF   78,W
00B0:  MOVWF  42
....................  
.................... low = lcd_read_nibble();  
00B1:  CALL   07F
00B2:  MOVF   78,W
00B3:  MOVWF  41
....................  
.................... return( (high<<4) | low);  
00B4:  SWAPF  42,W
00B5:  MOVWF  77
00B6:  MOVLW  F0
00B7:  ANDWF  77,F
00B8:  MOVF   77,W
00B9:  IORWF  41,W
00BA:  MOVWF  78
.................... }  
.................... #endif  
....................  
.................... //----------------------------------------  
.................... // Send a byte to the LCD.  
.................... void lcd_send_byte(int8 address, int8 n)  
.................... {  
.................... output_low(LCD_RS);  
*
00A5:  BSF    03.5
00A6:  BCF    06.0
00A7:  BCF    03.5
00A8:  BCF    06.0
....................  
.................... #ifdef USE_RW_PIN  
.................... while(bit_test(lcd_read_byte(),7)) ;  
*
00BB:  MOVF   78,W
00BC:  MOVWF  41
00BD:  BTFSC  41.7
00BE:  GOTO   0A9
.................... #else  
.................... delay_us(60);   
.................... #endif  
....................  
.................... if(address)  
00BF:  MOVF   3F,F
00C0:  BTFSC  03.2
00C1:  GOTO   0C7
....................    output_high(LCD_RS);  
00C2:  BSF    03.5
00C3:  BCF    06.0
00C4:  BCF    03.5
00C5:  BSF    06.0
00C6:  GOTO   0CB
.................... else  
....................    output_low(LCD_RS);  
00C7:  BSF    03.5
00C8:  BCF    06.0
00C9:  BCF    03.5
00CA:  BCF    06.0
....................        
....................  delay_cycles(1);  
00CB:  NOP
....................  
.................... #ifdef USE_RW_PIN  
.................... output_low(LCD_RW);  
00CC:  BSF    03.5
00CD:  BCF    06.1
00CE:  BCF    03.5
00CF:  BCF    06.1
.................... delay_cycles(1);  
00D0:  NOP
.................... #endif  
....................  
.................... output_low(LCD_E);  
00D1:  BSF    03.5
00D2:  BCF    06.2
00D3:  BCF    03.5
00D4:  BCF    06.2
....................  
.................... lcd_send_nibble(n >> 4);  
00D5:  SWAPF  40,W
00D6:  MOVWF  41
00D7:  MOVLW  0F
00D8:  ANDWF  41,F
00D9:  MOVF   41,W
00DA:  MOVWF  42
00DB:  CALL   056
.................... lcd_send_nibble(n & 0xf);  
00DC:  MOVF   40,W
00DD:  ANDLW  0F
00DE:  MOVWF  41
00DF:  MOVWF  42
00E0:  CALL   056
00E1:  RETURN
.................... }  
.................... //----------------------------  
....................  
.................... void lcd_init(void)  
.................... {  
....................    int8 i;  
....................  
....................    lcd_line = 1;  
00E2:  MOVLW  01
00E3:  MOVWF  27
....................  
....................    output_low(LCD_RS);  
00E4:  BSF    03.5
00E5:  BCF    06.0
00E6:  BCF    03.5
00E7:  BCF    06.0
....................  
....................    #ifdef USE_RW_PIN  
....................       output_low(LCD_RW);  
00E8:  BSF    03.5
00E9:  BCF    06.1
00EA:  BCF    03.5
00EB:  BCF    06.1
....................    #endif  
....................  
....................    output_low(LCD_E);  
00EC:  BSF    03.5
00ED:  BCF    06.2
00EE:  BCF    03.5
00EF:  BCF    06.2
....................  
....................    // Some LCDs require 15 ms minimum delay after  
....................    // power-up.  Others require 30 ms.  I'm going  
....................    // to set it to 35 ms, so it should work with  
....................    // all of them.  
....................    delay_ms(35);           
00F0:  MOVLW  23
00F1:  MOVWF  3B
00F2:  CALL   041
....................  
....................    for(i=0 ;i < 3; i++)  
00F3:  CLRF   2D
00F4:  MOVF   2D,W
00F5:  SUBLW  02
00F6:  BTFSS  03.0
00F7:  GOTO   100
....................    {  
....................       lcd_send_nibble(0x03);  
00F8:  MOVLW  03
00F9:  MOVWF  42
00FA:  CALL   056
....................       delay_ms(5);  
00FB:  MOVLW  05
00FC:  MOVWF  3B
00FD:  CALL   041
00FE:  INCF   2D,F
00FF:  GOTO   0F4
....................    }  
....................  
....................    lcd_send_nibble(0x02);  
0100:  MOVLW  02
0101:  MOVWF  42
0102:  CALL   056
....................  
....................    for(i=0; i < sizeof(LCD_INIT_STRING); i++)  
0103:  CLRF   2D
0104:  MOVF   2D,W
0105:  SUBLW  03
0106:  BTFSS  03.0
0107:  GOTO   111
....................    {  
....................       lcd_send_byte(0, LCD_INIT_STRING[i]);  
0108:  MOVF   2D,W
0109:  CALL   031
010A:  MOVWF  2E
010B:  CLRF   3F
010C:  MOVF   2E,W
010D:  MOVWF  40
010E:  CALL   0A5
....................      
....................       // If the R/W signal is not used, then  
....................       // the busy bit can't be polled.  One of  
....................       // the init commands takes longer than  
....................       // the hard-coded delay of 50 us, so in  
....................       // that case, lets just do a 5 ms delay  
....................       // after all four of them.  
....................       #ifndef USE_RW_PIN  
010F:  INCF   2D,F
0110:  GOTO   104
....................          delay_ms(5);  
....................       #endif  
....................    }  
0111:  BCF    0A.3
0112:  BCF    0A.4
0113:  GOTO   344 (RETURN)
....................  
.................... }  
....................  
.................... //----------------------------  
....................  
.................... void lcd_gotoxy(int8 x, int8 y)  
.................... {  
.................... int8 address;  
....................  
....................  
.................... switch(y)  
*
0131:  MOVF   3C,W
0132:  XORLW  01
0133:  BTFSC  03.2
0134:  GOTO   13F
0135:  XORLW  03
0136:  BTFSC  03.2
0137:  GOTO   141
0138:  XORLW  01
0139:  BTFSC  03.2
013A:  GOTO   144
013B:  XORLW  07
013C:  BTFSC  03.2
013D:  GOTO   147
013E:  GOTO   14A
....................   {  
....................    case 1:  
....................      address = LCD_LINE_1_ADDRESS;  
013F:  CLRF   3D
....................      break;  
0140:  GOTO   14B
....................  
....................    case 2:  
....................      address = LCD_LINE_2_ADDRESS;  
0141:  MOVLW  40
0142:  MOVWF  3D
....................      break;  
0143:  GOTO   14B
....................  
....................    case 3:  
....................      address = LCD_LINE_3_ADDRESS;  
0144:  MOVLW  14
0145:  MOVWF  3D
....................      break;  
0146:  GOTO   14B
....................  
....................    case 4:  
....................      address = LCD_LINE_4_ADDRESS;  
0147:  MOVLW  54
0148:  MOVWF  3D
....................      break;  
0149:  GOTO   14B
....................  
....................    default:  
....................      address = LCD_LINE_1_ADDRESS;  
014A:  CLRF   3D
....................      break;  
....................        
....................   }  
....................  
.................... address += x-1;  
014B:  MOVLW  01
014C:  SUBWF  3B,W
014D:  ADDWF  3D,F
.................... lcd_send_byte(0, 0x80 | address);  
014E:  MOVF   3D,W
014F:  IORLW  80
0150:  MOVWF  3E
0151:  CLRF   3F
0152:  MOVF   3E,W
0153:  MOVWF  40
0154:  CALL   0A5
0155:  RETURN
.................... }  
....................  
.................... //-----------------------------  
.................... void lcd_putc(char c)  
.................... {  
....................  switch(c)  
0156:  MOVF   3A,W
0157:  XORLW  0C
0158:  BTFSC  03.2
0159:  GOTO   161
015A:  XORLW  06
015B:  BTFSC  03.2
015C:  GOTO   16B
015D:  XORLW  02
015E:  BTFSC  03.2
015F:  GOTO   172
0160:  GOTO   177
....................    {  
....................     case '\f':  
....................       lcd_send_byte(0,1);  
0161:  CLRF   3F
0162:  MOVLW  01
0163:  MOVWF  40
0164:  CALL   0A5
....................       lcd_line = 1;  
0165:  MOVLW  01
0166:  MOVWF  27
....................       delay_ms(2);  
0167:  MOVLW  02
0168:  MOVWF  3B
0169:  CALL   041
....................       break;  
016A:  GOTO   17C
....................      
....................     case '\n':  
....................        lcd_gotoxy(1, ++lcd_line);  
016B:  INCF   27,F
016C:  MOVLW  01
016D:  MOVWF  3B
016E:  MOVF   27,W
016F:  MOVWF  3C
0170:  CALL   131
....................        break;  
0171:  GOTO   17C
....................      
....................     case '\b':  
....................        lcd_send_byte(0,0x10);  
0172:  CLRF   3F
0173:  MOVLW  10
0174:  MOVWF  40
0175:  CALL   0A5
....................        break;  
0176:  GOTO   17C
....................      
....................     default:  
....................        lcd_send_byte(1,c);  
0177:  MOVLW  01
0178:  MOVWF  3F
0179:  MOVF   3A,W
017A:  MOVWF  40
017B:  CALL   0A5
....................        break;  
....................    }  
017C:  RETURN
.................... }  
....................  
.................... //------------------------------  
.................... #ifdef USE_RW_PIN  
.................... char lcd_getc(int8 x, int8 y)  
.................... {  
.................... char value;  
....................  
.................... lcd_gotoxy(x,y);  
....................  
.................... // Wait until busy flag is low.  
.................... while(bit_test(lcd_read_byte(),7));   
....................  
.................... output_high(LCD_RS);  
.................... value = lcd_read_byte();  
.................... output_low(LCD_RS);  
....................  
.................... return(value);  
.................... }  
.................... #endif  
....................  
.................... #USE RS232(BAUD=9600, xmit=PIN_C6, rcv=PIN_C7,STREAM=COM_A) 
....................  
.................... float value; // external value of ADC 
.................... char c; 
....................  
.................... #INT_RDA 
.................... void  RDA_isr(void)  
.................... { 
....................  
....................    c = fgetc(COM_A); // method for getting data from terminal 
*
0039:  BTFSS  0C.5
003A:  GOTO   039
003B:  MOVF   1A,W
003C:  MOVWF  2C
....................     
003D:  BCF    0C.5
003E:  BCF    0A.3
003F:  BCF    0A.4
0040:  GOTO   01D
.................... } 
....................  
.................... void main() 
*
031F:  MOVF   03,W
0320:  ANDLW  1F
0321:  MOVWF  03
0322:  MOVLW  19
0323:  BSF    03.5
0324:  MOVWF  19
0325:  MOVLW  A6
0326:  MOVWF  18
0327:  MOVLW  90
0328:  BCF    03.5
0329:  MOVWF  18
032A:  BSF    03.5
032B:  BSF    1F.0
032C:  BSF    1F.1
032D:  BSF    1F.2
032E:  BCF    1F.3
032F:  MOVLW  07
0330:  MOVWF  1C
0331:  BCF    03.7
.................... { 
....................  
....................    setup_adc_ports(AN0_AN1_VSS_VREF); 
0332:  BSF    1F.0
0333:  BCF    1F.1
0334:  BSF    1F.2
0335:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_2); 
0336:  BCF    1F.6
0337:  BCF    03.5
0338:  BCF    1F.6
0339:  BCF    1F.7
033A:  BSF    03.5
033B:  BSF    1F.7
033C:  BCF    03.5
033D:  BSF    1F.0
....................  
....................    enable_interrupts(INT_RDA); 
033E:  BSF    03.5
033F:  BSF    0C.5
....................    enable_interrupts(GLOBAL); 
0340:  MOVLW  C0
0341:  BCF    03.5
0342:  IORWF  0B,F
....................  
....................  
....................    lcd_init(); 
0343:  GOTO   0E2
....................     
....................    while(TRUE) 
....................    { 
....................       if(c=='a') 
0344:  MOVF   2C,W
0345:  SUBLW  61
0346:  BTFSS  03.2
0347:  GOTO   376
....................       { 
....................            set_adc_channel(0); 
0348:  MOVLW  00
0349:  MOVWF  78
034A:  MOVF   1F,W
034B:  ANDLW  C7
034C:  IORWF  78,W
034D:  MOVWF  1F
....................            value = read_adc(); 
034E:  BSF    1F.2
034F:  BTFSC  1F.2
0350:  GOTO   34F
0351:  MOVF   1E,W
0352:  MOVWF  7A
0353:  BSF    03.5
0354:  MOVF   1E,W
0355:  BCF    03.5
0356:  MOVWF  2D
0357:  MOVF   1E,W
0358:  MOVWF  2E
0359:  CALL   114
035A:  MOVF   7A,W
035B:  MOVWF  2B
035C:  MOVF   79,W
035D:  MOVWF  2A
035E:  MOVF   78,W
035F:  MOVWF  29
0360:  MOVF   77,W
0361:  MOVWF  28
....................            printf(LCD_PUTC," %f ",value); 
0362:  MOVLW  20
0363:  MOVWF  3A
0364:  CALL   156
0365:  MOVLW  89
0366:  MOVWF  04
0367:  MOVF   2B,W
0368:  MOVWF  30
0369:  MOVF   2A,W
036A:  MOVWF  2F
036B:  MOVF   29,W
036C:  MOVWF  2E
036D:  MOVF   28,W
036E:  MOVWF  2D
036F:  MOVLW  02
0370:  MOVWF  31
0371:  CALL   1CC
0372:  MOVLW  20
0373:  MOVWF  3A
0374:  CALL   156
....................       } 
0375:  GOTO   3A7
....................       else if(c=='b') 
0376:  MOVF   2C,W
0377:  SUBLW  62
0378:  BTFSS  03.2
0379:  GOTO   3A7
....................       { 
....................             set_adc_channel(1); 
037A:  MOVLW  08
037B:  MOVWF  78
037C:  MOVF   1F,W
037D:  ANDLW  C7
037E:  IORWF  78,W
037F:  MOVWF  1F
....................             value = read_adc(); 
0380:  BSF    1F.2
0381:  BTFSC  1F.2
0382:  GOTO   381
0383:  MOVF   1E,W
0384:  MOVWF  7A
0385:  BSF    03.5
0386:  MOVF   1E,W
0387:  BCF    03.5
0388:  MOVWF  2D
0389:  MOVF   1E,W
038A:  MOVWF  2E
038B:  CALL   114
038C:  MOVF   7A,W
038D:  MOVWF  2B
038E:  MOVF   79,W
038F:  MOVWF  2A
0390:  MOVF   78,W
0391:  MOVWF  29
0392:  MOVF   77,W
0393:  MOVWF  28
....................             printf(LCD_PUTC," %f ",value); 
0394:  MOVLW  20
0395:  MOVWF  3A
0396:  CALL   156
0397:  MOVLW  89
0398:  MOVWF  04
0399:  MOVF   2B,W
039A:  MOVWF  30
039B:  MOVF   2A,W
039C:  MOVWF  2F
039D:  MOVF   29,W
039E:  MOVWF  2E
039F:  MOVF   28,W
03A0:  MOVWF  2D
03A1:  MOVLW  02
03A2:  MOVWF  31
03A3:  CALL   1CC
03A4:  MOVLW  20
03A5:  MOVWF  3A
03A6:  CALL   156
....................       } 
....................           
....................       lcd_gotoxy(1,1); 
03A7:  MOVLW  01
03A8:  MOVWF  3B
03A9:  MOVWF  3C
03AA:  CALL   131
....................       delay_ms(50); 
03AB:  MOVLW  32
03AC:  MOVWF  3B
03AD:  CALL   041
03AE:  GOTO   344
....................          
....................    } 
....................  
.................... } 
03AF:  SLEEP

Configuration Fuses:
   Word  1: 2F45   XT WDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
