CCS PCM C Compiler, Version 5.048, 5967               22-ге-16 13:45

               Filename:   G:\learning\Micochip\Projects\CCS\Sensor\main.lst

               ROM used:   1073 words (13%)
                           Largest free fragment is 2048
               RAM used:   18 (5%) at main() level
                           44 (12%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   3BC
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
*
00DF:  MOVLW  8E
00E0:  MOVWF  77
00E1:  MOVF   2E,W
00E2:  MOVWF  78
00E3:  MOVF   2D,W
00E4:  MOVWF  79
00E5:  CLRF   7A
00E6:  MOVF   78,F
00E7:  BTFSS  03.2
00E8:  GOTO   0F3
00E9:  MOVF   79,W
00EA:  MOVWF  78
00EB:  CLRF   79
00EC:  MOVLW  08
00ED:  SUBWF  77,F
00EE:  MOVF   78,F
00EF:  BTFSS  03.2
00F0:  GOTO   0F3
00F1:  CLRF   77
00F2:  GOTO   0FB
00F3:  BCF    03.0
00F4:  BTFSC  78.7
00F5:  GOTO   0FA
00F6:  RLF    79,F
00F7:  RLF    78,F
00F8:  DECF   77,F
00F9:  GOTO   0F3
00FA:  BCF    78.7
00FB:  BCF    0A.3
00FC:  BCF    0A.4
00FD:  GOTO   3E5 (RETURN)
00FE:  MOVF   2D,W
00FF:  BTFSC  03.2
0100:  GOTO   1C3
0101:  MOVWF  39
0102:  MOVF   31,W
0103:  BTFSC  03.2
0104:  GOTO   1C3
0105:  SUBWF  39,F
0106:  BTFSS  03.0
0107:  GOTO   10D
0108:  MOVLW  7F
0109:  ADDWF  39,F
010A:  BTFSC  03.0
010B:  GOTO   1C3
010C:  GOTO   113
010D:  MOVLW  81
010E:  SUBWF  39,F
010F:  BTFSS  03.0
0110:  GOTO   1C3
0111:  BTFSC  03.2
0112:  GOTO   1C3
0113:  MOVF   39,W
0114:  MOVWF  77
0115:  CLRF   78
0116:  CLRF   79
0117:  CLRF   7A
0118:  CLRF   38
0119:  MOVF   2E,W
011A:  MOVWF  37
011B:  BSF    37.7
011C:  MOVF   2F,W
011D:  MOVWF  36
011E:  MOVF   30,W
011F:  MOVWF  35
0120:  MOVLW  19
0121:  MOVWF  39
0122:  MOVF   34,W
0123:  SUBWF  35,F
0124:  BTFSC  03.0
0125:  GOTO   136
0126:  MOVLW  01
0127:  SUBWF  36,F
0128:  BTFSC  03.0
0129:  GOTO   136
012A:  SUBWF  37,F
012B:  BTFSC  03.0
012C:  GOTO   136
012D:  SUBWF  38,F
012E:  BTFSC  03.0
012F:  GOTO   136
0130:  INCF   38,F
0131:  INCF   37,F
0132:  INCF   36,F
0133:  MOVF   34,W
0134:  ADDWF  35,F
0135:  GOTO   168
0136:  MOVF   33,W
0137:  SUBWF  36,F
0138:  BTFSC  03.0
0139:  GOTO   151
013A:  MOVLW  01
013B:  SUBWF  37,F
013C:  BTFSC  03.0
013D:  GOTO   151
013E:  SUBWF  38,F
013F:  BTFSC  03.0
0140:  GOTO   151
0141:  INCF   38,F
0142:  INCF   37,F
0143:  MOVF   33,W
0144:  ADDWF  36,F
0145:  MOVF   34,W
0146:  ADDWF  35,F
0147:  BTFSS  03.0
0148:  GOTO   168
0149:  INCF   36,F
014A:  BTFSS  03.2
014B:  GOTO   168
014C:  INCF   37,F
014D:  BTFSS  03.2
014E:  GOTO   168
014F:  INCF   38,F
0150:  GOTO   168
0151:  MOVF   32,W
0152:  IORLW  80
0153:  SUBWF  37,F
0154:  BTFSC  03.0
0155:  GOTO   167
0156:  MOVLW  01
0157:  SUBWF  38,F
0158:  BTFSC  03.0
0159:  GOTO   167
015A:  INCF   38,F
015B:  MOVF   32,W
015C:  IORLW  80
015D:  ADDWF  37,F
015E:  MOVF   33,W
015F:  ADDWF  36,F
0160:  BTFSS  03.0
0161:  GOTO   145
0162:  INCF   37,F
0163:  BTFSS  03.2
0164:  GOTO   145
0165:  INCF   38,F
0166:  GOTO   145
0167:  BSF    7A.0
0168:  DECFSZ 39,F
0169:  GOTO   16B
016A:  GOTO   176
016B:  BCF    03.0
016C:  RLF    35,F
016D:  RLF    36,F
016E:  RLF    37,F
016F:  RLF    38,F
0170:  BCF    03.0
0171:  RLF    7A,F
0172:  RLF    79,F
0173:  RLF    78,F
0174:  RLF    3A,F
0175:  GOTO   122
0176:  BTFSS  3A.0
0177:  GOTO   17E
0178:  BCF    03.0
0179:  RRF    78,F
017A:  RRF    79,F
017B:  RRF    7A,F
017C:  RRF    3A,F
017D:  GOTO   181
017E:  DECF   77,F
017F:  BTFSC  03.2
0180:  GOTO   1C3
0181:  BTFSC  3A.7
0182:  GOTO   1AA
0183:  BCF    03.0
0184:  RLF    35,F
0185:  RLF    36,F
0186:  RLF    37,F
0187:  RLF    38,F
0188:  MOVF   34,W
0189:  SUBWF  35,F
018A:  BTFSC  03.0
018B:  GOTO   196
018C:  MOVLW  01
018D:  SUBWF  36,F
018E:  BTFSC  03.0
018F:  GOTO   196
0190:  SUBWF  37,F
0191:  BTFSC  03.0
0192:  GOTO   196
0193:  SUBWF  38,F
0194:  BTFSS  03.0
0195:  GOTO   1B9
0196:  MOVF   33,W
0197:  SUBWF  36,F
0198:  BTFSC  03.0
0199:  GOTO   1A1
019A:  MOVLW  01
019B:  SUBWF  37,F
019C:  BTFSC  03.0
019D:  GOTO   1A1
019E:  SUBWF  38,F
019F:  BTFSS  03.0
01A0:  GOTO   1B9
01A1:  MOVF   32,W
01A2:  IORLW  80
01A3:  SUBWF  37,F
01A4:  BTFSC  03.0
01A5:  GOTO   1AA
01A6:  MOVLW  01
01A7:  SUBWF  38,F
01A8:  BTFSS  03.0
01A9:  GOTO   1B9
01AA:  INCF   7A,F
01AB:  BTFSS  03.2
01AC:  GOTO   1B9
01AD:  INCF   79,F
01AE:  BTFSS  03.2
01AF:  GOTO   1B9
01B0:  INCF   78,F
01B1:  BTFSS  03.2
01B2:  GOTO   1B9
01B3:  INCF   77,F
01B4:  BTFSC  03.2
01B5:  GOTO   1C3
01B6:  RRF    78,F
01B7:  RRF    79,F
01B8:  RRF    7A,F
01B9:  MOVF   2E,W
01BA:  MOVWF  39
01BB:  MOVF   32,W
01BC:  XORWF  39,F
01BD:  BTFSS  39.7
01BE:  GOTO   1C1
01BF:  BSF    78.7
01C0:  GOTO   1C7
01C1:  BCF    78.7
01C2:  GOTO   1C7
01C3:  CLRF   77
01C4:  CLRF   78
01C5:  CLRF   79
01C6:  CLRF   7A
01C7:  BCF    0A.3
01C8:  BCF    0A.4
01C9:  GOTO   3FC (RETURN)
01CA:  MOVF   3A,W
01CB:  BTFSC  03.2
01CC:  GOTO   23A
01CD:  MOVWF  42
01CE:  MOVF   3E,W
01CF:  BTFSC  03.2
01D0:  GOTO   23A
01D1:  ADDWF  42,F
01D2:  BTFSC  03.0
01D3:  GOTO   1DB
01D4:  MOVLW  7F
01D5:  SUBWF  42,F
01D6:  BTFSS  03.0
01D7:  GOTO   23A
01D8:  BTFSC  03.2
01D9:  GOTO   23A
01DA:  GOTO   1DF
01DB:  MOVLW  81
01DC:  ADDWF  42,F
01DD:  BTFSC  03.0
01DE:  GOTO   23A
01DF:  MOVF   42,W
01E0:  MOVWF  77
01E1:  CLRF   78
01E2:  CLRF   79
01E3:  CLRF   7A
01E4:  MOVF   3B,W
01E5:  MOVWF  46
01E6:  BSF    46.7
01E7:  MOVF   3C,W
01E8:  MOVWF  45
01E9:  MOVF   3D,W
01EA:  MOVWF  44
01EB:  MOVLW  18
01EC:  MOVWF  42
01ED:  CLRF   43
01EE:  BTFSS  44.0
01EF:  GOTO   208
01F0:  MOVF   41,W
01F1:  ADDWF  7A,F
01F2:  BTFSS  03.0
01F3:  GOTO   1FA
01F4:  INCF   79,F
01F5:  BTFSS  03.2
01F6:  GOTO   1FA
01F7:  INCF   78,F
01F8:  BTFSC  03.2
01F9:  BSF    43.7
01FA:  MOVF   40,W
01FB:  ADDWF  79,F
01FC:  BTFSS  03.0
01FD:  GOTO   201
01FE:  INCF   78,F
01FF:  BTFSC  03.2
0200:  BSF    43.7
0201:  MOVF   3F,W
0202:  MOVWF  3C
0203:  BSF    3C.7
0204:  MOVF   3C,W
0205:  ADDWF  78,F
0206:  BTFSC  03.0
0207:  BSF    43.7
0208:  RLF    43,F
0209:  RRF    78,F
020A:  RRF    79,F
020B:  RRF    7A,F
020C:  RRF    46,F
020D:  RRF    45,F
020E:  RRF    44,F
020F:  BCF    03.0
0210:  DECFSZ 42,F
0211:  GOTO   1ED
0212:  MOVLW  01
0213:  ADDWF  77,F
0214:  BTFSC  03.0
0215:  GOTO   23A
0216:  BTFSC  78.7
0217:  GOTO   21F
0218:  RLF    46,F
0219:  RLF    7A,F
021A:  RLF    79,F
021B:  RLF    78,F
021C:  DECF   77,F
021D:  BTFSC  03.2
021E:  GOTO   23A
021F:  BTFSS  46.7
0220:  GOTO   230
0221:  INCF   7A,F
0222:  BTFSS  03.2
0223:  GOTO   230
0224:  INCF   79,F
0225:  BTFSS  03.2
0226:  GOTO   230
0227:  INCF   78,F
0228:  BTFSS  03.2
0229:  GOTO   230
022A:  RRF    78,F
022B:  RRF    79,F
022C:  RRF    7A,F
022D:  INCF   77,F
022E:  BTFSC  03.2
022F:  GOTO   23A
0230:  MOVF   3B,W
0231:  MOVWF  43
0232:  MOVF   3F,W
0233:  XORWF  43,F
0234:  BTFSS  43.7
0235:  GOTO   238
0236:  BSF    78.7
0237:  GOTO   23E
0238:  BCF    78.7
0239:  GOTO   23E
023A:  CLRF   77
023B:  CLRF   78
023C:  CLRF   79
023D:  CLRF   7A
023E:  RETURN
*
0264:  BTFSC  03.1
0265:  GOTO   269
0266:  MOVLW  42
0267:  MOVWF  04
0268:  BCF    03.7
0269:  CLRF   77
026A:  CLRF   78
026B:  CLRF   79
026C:  CLRF   7A
026D:  CLRF   42
026E:  CLRF   43
026F:  CLRF   44
0270:  CLRF   45
0271:  MOVF   41,W
0272:  IORWF  40,W
0273:  IORWF  3F,W
0274:  IORWF  3E,W
0275:  BTFSC  03.2
0276:  GOTO   2A7
0277:  MOVLW  20
0278:  MOVWF  46
0279:  BCF    03.0
027A:  RLF    3A,F
027B:  RLF    3B,F
027C:  RLF    3C,F
027D:  RLF    3D,F
027E:  RLF    42,F
027F:  RLF    43,F
0280:  RLF    44,F
0281:  RLF    45,F
0282:  MOVF   41,W
0283:  SUBWF  45,W
0284:  BTFSS  03.2
0285:  GOTO   290
0286:  MOVF   40,W
0287:  SUBWF  44,W
0288:  BTFSS  03.2
0289:  GOTO   290
028A:  MOVF   3F,W
028B:  SUBWF  43,W
028C:  BTFSS  03.2
028D:  GOTO   290
028E:  MOVF   3E,W
028F:  SUBWF  42,W
0290:  BTFSS  03.0
0291:  GOTO   2A1
0292:  MOVF   3E,W
0293:  SUBWF  42,F
0294:  MOVF   3F,W
0295:  BTFSS  03.0
0296:  INCFSZ 3F,W
0297:  SUBWF  43,F
0298:  MOVF   40,W
0299:  BTFSS  03.0
029A:  INCFSZ 40,W
029B:  SUBWF  44,F
029C:  MOVF   41,W
029D:  BTFSS  03.0
029E:  INCFSZ 41,W
029F:  SUBWF  45,F
02A0:  BSF    03.0
02A1:  RLF    77,F
02A2:  RLF    78,F
02A3:  RLF    79,F
02A4:  RLF    7A,F
02A5:  DECFSZ 46,F
02A6:  GOTO   279
02A7:  MOVF   42,W
02A8:  MOVWF  00
02A9:  INCF   04,F
02AA:  MOVF   43,W
02AB:  MOVWF  00
02AC:  INCF   04,F
02AD:  MOVF   44,W
02AE:  MOVWF  00
02AF:  INCF   04,F
02B0:  MOVF   45,W
02B1:  MOVWF  00
02B2:  RETURN
*
02DA:  MOVF   04,W
02DB:  MOVWF  32
02DC:  MOVF   31,W
02DD:  MOVWF  34
02DE:  BTFSC  03.2
02DF:  GOTO   2F9
02E0:  MOVF   30,W
02E1:  MOVWF  3D
02E2:  MOVF   2F,W
02E3:  MOVWF  3C
02E4:  MOVF   2E,W
02E5:  MOVWF  3B
02E6:  MOVF   2D,W
02E7:  MOVWF  3A
02E8:  CLRF   41
02E9:  CLRF   40
02EA:  MOVLW  20
02EB:  MOVWF  3F
02EC:  MOVLW  82
02ED:  MOVWF  3E
02EE:  CALL   1CA
02EF:  MOVF   7A,W
02F0:  MOVWF  30
02F1:  MOVF   79,W
02F2:  MOVWF  2F
02F3:  MOVF   78,W
02F4:  MOVWF  2E
02F5:  MOVF   77,W
02F6:  MOVWF  2D
02F7:  DECFSZ 34,F
02F8:  GOTO   2E0
02F9:  MOVF   30,W
02FA:  MOVWF  3D
02FB:  MOVF   2F,W
02FC:  MOVWF  3C
02FD:  MOVF   2E,W
02FE:  MOVWF  3B
02FF:  MOVF   2D,W
0300:  MOVWF  3A
0301:  MOVF   3A,W
0302:  SUBLW  B6
0303:  MOVWF  3A
0304:  CLRF   7A
0305:  MOVF   3B,W
0306:  MOVWF  3E
0307:  BSF    3B.7
0308:  BCF    03.0
0309:  RRF    3B,F
030A:  RRF    3C,F
030B:  RRF    3D,F
030C:  RRF    7A,F
030D:  RRF    79,F
030E:  RRF    78,F
030F:  RRF    77,F
0310:  DECFSZ 3A,F
0311:  GOTO   308
0312:  BTFSS  3E.7
0313:  GOTO   31F
0314:  COMF   77,F
0315:  COMF   78,F
0316:  COMF   79,F
0317:  COMF   7A,F
0318:  INCF   77,F
0319:  BTFSC  03.2
031A:  INCF   78,F
031B:  BTFSC  03.2
031C:  INCF   79,F
031D:  BTFSC  03.2
031E:  INCF   7A,F
031F:  MOVF   7A,W
0320:  MOVWF  30
0321:  MOVF   79,W
0322:  MOVWF  2F
0323:  MOVF   78,W
0324:  MOVWF  2E
0325:  MOVF   77,W
0326:  MOVWF  2D
0327:  BTFSS  30.7
0328:  GOTO   336
0329:  DECF   32,F
032A:  BSF    32.5
032B:  COMF   2D,F
032C:  COMF   2E,F
032D:  COMF   2F,F
032E:  COMF   30,F
032F:  INCF   2D,F
0330:  BTFSC  03.2
0331:  INCF   2E,F
0332:  BTFSC  03.2
0333:  INCF   2F,F
0334:  BTFSC  03.2
0335:  INCF   30,F
0336:  MOVLW  3B
0337:  MOVWF  39
0338:  MOVLW  9A
0339:  MOVWF  38
033A:  MOVLW  CA
033B:  MOVWF  37
033C:  CLRF   36
033D:  MOVLW  0A
033E:  MOVWF  34
033F:  MOVF   31,W
0340:  BTFSC  03.2
0341:  INCF   32,F
0342:  BSF    03.1
0343:  MOVLW  2D
0344:  MOVWF  04
0345:  BCF    03.7
0346:  MOVF   30,W
0347:  MOVWF  3D
0348:  MOVF   2F,W
0349:  MOVWF  3C
034A:  MOVF   2E,W
034B:  MOVWF  3B
034C:  MOVF   2D,W
034D:  MOVWF  3A
034E:  MOVF   39,W
034F:  MOVWF  41
0350:  MOVF   38,W
0351:  MOVWF  40
0352:  MOVF   37,W
0353:  MOVWF  3F
0354:  MOVF   36,W
0355:  MOVWF  3E
0356:  CALL   264
0357:  MOVF   78,W
0358:  MOVF   77,F
0359:  BTFSS  03.2
035A:  GOTO   36E
035B:  INCF   31,W
035C:  SUBWF  34,W
035D:  BTFSC  03.2
035E:  GOTO   36E
035F:  MOVF   32,W
0360:  BTFSC  03.2
0361:  GOTO   370
0362:  ANDLW  0F
0363:  SUBWF  34,W
0364:  BTFSC  03.2
0365:  GOTO   368
0366:  BTFSC  03.0
0367:  GOTO   3A0
0368:  BTFSC  32.7
0369:  GOTO   3A0
036A:  BTFSC  32.6
036B:  GOTO   370
036C:  MOVLW  20
036D:  GOTO   39C
036E:  MOVLW  20
036F:  ANDWF  32,F
0370:  BTFSS  32.5
0371:  GOTO   37E
0372:  BCF    32.5
0373:  MOVF   31,W
0374:  BTFSS  03.2
0375:  DECF   32,F
0376:  MOVF   77,W
0377:  MOVWF  32
0378:  MOVLW  2D
0379:  MOVWF  3A
037A:  CALL   2B3
037B:  MOVF   32,W
037C:  MOVWF  77
037D:  CLRF   32
037E:  MOVF   31,W
037F:  SUBWF  34,W
0380:  BTFSS  03.2
0381:  GOTO   38C
0382:  MOVF   77,W
0383:  MOVWF  32
0384:  MOVLW  2E
0385:  MOVWF  3A
0386:  CALL   2B3
0387:  MOVF   32,W
0388:  MOVWF  77
0389:  MOVLW  20
038A:  ANDWF  32,F
038B:  MOVLW  00
038C:  MOVLW  30
038D:  BTFSS  32.5
038E:  GOTO   39C
038F:  BCF    32.5
0390:  MOVF   31,W
0391:  BTFSS  03.2
0392:  DECF   32,F
0393:  MOVF   77,W
0394:  MOVWF  32
0395:  MOVLW  2D
0396:  MOVWF  3A
0397:  CALL   2B3
0398:  MOVF   32,W
0399:  MOVWF  77
039A:  CLRF   32
039B:  MOVLW  30
039C:  ADDWF  77,F
039D:  MOVF   77,W
039E:  MOVWF  3A
039F:  CALL   2B3
03A0:  BCF    03.1
03A1:  MOVF   39,W
03A2:  MOVWF  3D
03A3:  MOVF   38,W
03A4:  MOVWF  3C
03A5:  MOVF   37,W
03A6:  MOVWF  3B
03A7:  MOVF   36,W
03A8:  MOVWF  3A
03A9:  CLRF   41
03AA:  CLRF   40
03AB:  CLRF   3F
03AC:  MOVLW  0A
03AD:  MOVWF  3E
03AE:  CALL   264
03AF:  MOVF   7A,W
03B0:  MOVWF  39
03B1:  MOVF   79,W
03B2:  MOVWF  38
03B3:  MOVF   78,W
03B4:  MOVWF  37
03B5:  MOVF   77,W
03B6:  MOVWF  36
03B7:  DECFSZ 34,F
03B8:  GOTO   342
03B9:  BCF    0A.3
03BA:  BCF    0A.4
03BB:  GOTO   42C (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=8 
.................... #use delay(crystal=4MHz) 
*
000C:  MOVLW  3B
000D:  MOVWF  04
000E:  BCF    03.7
000F:  MOVF   00,W
0010:  BTFSC  03.2
0011:  GOTO   020
0012:  MOVLW  01
0013:  MOVWF  78
0014:  CLRF   77
0015:  DECFSZ 77,F
0016:  GOTO   015
0017:  DECFSZ 78,F
0018:  GOTO   014
0019:  MOVLW  4A
001A:  MOVWF  77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  GOTO   01E
001E:  DECFSZ 00,F
001F:  GOTO   012
0020:  RETURN
....................  
....................  
.................... #include "Flex_LCD420.c" 
.................... // Flex_LCD420.c  
....................  
.................... // These pins are for my Microchip PicDem2-Plus board,  
.................... // which I used to test this driver.  
.................... // An external 20x4 LCD is connected to these pins.  
.................... // Change these pins to match your own board's connections.  
....................  
.................... #define LCD_DB4   PIN_B4 
.................... #define LCD_DB5   PIN_B5  
.................... #define LCD_DB6   PIN_B6  
.................... #define LCD_DB7   PIN_B7  
....................  
.................... #define LCD_RS    PIN_B0  
.................... #define LCD_RW    PIN_B1  
.................... #define LCD_E     PIN_B2  
....................  
.................... /*  
.................... // To prove that the driver can be used with random  
.................... // pins, I also tested it with these pins:  
.................... #define LCD_DB4   PIN_D4  
.................... #define LCD_DB5   PIN_B1  
.................... #define LCD_DB6   PIN_C5  
.................... #define LCD_DB7   PIN_B5  
....................  
.................... #define LCD_RS    PIN_E2  
.................... #define LCD_RW    PIN_B2  
.................... #define LCD_E     PIN_D6  
.................... */  
....................  
.................... // If you want only a 6-pin interface to your LCD, then  
.................... // connect the R/W pin on the LCD to ground, and comment  
.................... // out the following line.  Doing so will save one PIC  
.................... // pin, but at the cost of losing the ability to read from  
.................... // the LCD.  It also makes the write time a little longer  
.................... // because a static delay must be used, instead of polling  
.................... // the LCD's busy bit.  Normally a 6-pin interface is only  
.................... // used if you are running out of PIC pins, and you need  
.................... // to use as few as possible for the LCD.  
.................... #define USE_RW_PIN   1       
....................  
....................  
.................... // These are the line addresses for most 4x20 LCDs.  
.................... #define LCD_LINE_1_ADDRESS 0x00  
.................... #define LCD_LINE_2_ADDRESS 0x40  
.................... #define LCD_LINE_3_ADDRESS 0x14  
.................... #define LCD_LINE_4_ADDRESS 0x54  
....................  
.................... // These are the line addresses for LCD's which use  
.................... // the Hitachi HD66712U controller chip.  
.................... /*  
.................... #define LCD_LINE_1_ADDRESS 0x00  
.................... #define LCD_LINE_2_ADDRESS 0x20  
.................... #define LCD_LINE_3_ADDRESS 0x40  
.................... #define LCD_LINE_4_ADDRESS 0x60  
.................... */  
....................  
....................  
.................... //========================================  
....................  
.................... #define lcd_type 2   // 0=5x7, 1=5x10, 2=2 lines(or more)  
....................  
.................... int8 lcd_line ; 
....................  
.................... int8 const LCD_INIT_STRING[4] =  
.................... {  
....................  0x20 | (lcd_type << 2),  // Set mode: 4-bit, 2+ lines, 5x8 dots  
....................  0xc,                     // Display on  
....................  1,                       // Clear display 
....................  6                        // Increment cursor  
....................  };  
....................                                
....................  
.................... //-------------------------------------  
.................... void lcd_send_nibble(int8 nibble)  
.................... {  
.................... // Note:  !! converts an integer expression  
.................... // to a boolean (1 or 0).  
....................  output_bit(LCD_DB4, !!(nibble & 1));  
0021:  BTFSC  42.0
0022:  GOTO   025
0023:  BCF    06.4
0024:  GOTO   026
0025:  BSF    06.4
0026:  BSF    03.5
0027:  BCF    06.4
....................  output_bit(LCD_DB5, !!(nibble & 2));   
0028:  BCF    03.5
0029:  BTFSC  42.1
002A:  GOTO   02D
002B:  BCF    06.5
002C:  GOTO   02E
002D:  BSF    06.5
002E:  BSF    03.5
002F:  BCF    06.5
....................  output_bit(LCD_DB6, !!(nibble & 4));     
0030:  BCF    03.5
0031:  BTFSC  42.2
0032:  GOTO   035
0033:  BCF    06.6
0034:  GOTO   036
0035:  BSF    06.6
0036:  BSF    03.5
0037:  BCF    06.6
....................  output_bit(LCD_DB7, !!(nibble & 8));     
0038:  BCF    03.5
0039:  BTFSC  42.3
003A:  GOTO   03D
003B:  BCF    06.7
003C:  GOTO   03E
003D:  BSF    06.7
003E:  BSF    03.5
003F:  BCF    06.7
....................  
....................  delay_cycles(1) ; 
0040:  NOP
....................  output_high(LCD_E);  
0041:  BCF    06.2
0042:  BCF    03.5
0043:  BSF    06.2
....................  delay_us(2);  
0044:  GOTO   045
....................  output_low(LCD_E);  
0045:  BSF    03.5
0046:  BCF    06.2
0047:  BCF    03.5
0048:  BCF    06.2
0049:  RETURN
.................... }  
....................  
.................... //-----------------------------------  
.................... // This sub-routine is only called by lcd_read_byte().  
.................... // It's not a stand-alone routine.  For example, the  
.................... // R/W signal is set high by lcd_read_byte() before  
.................... // this routine is called.       
....................  
.................... #ifdef USE_RW_PIN  
.................... int8 lcd_read_nibble(void)  
.................... {  
.................... int8 retval;  
.................... // Create bit variables so that we can easily set  
.................... // individual bits in the retval variable.  
.................... #bit retval_0 = retval.0  
.................... #bit retval_1 = retval.1  
.................... #bit retval_2 = retval.2  
.................... #bit retval_3 = retval.3  
....................  
.................... retval = 0;  
004A:  CLRF   43
....................      
.................... output_high(LCD_E);  
004B:  BSF    03.5
004C:  BCF    06.2
004D:  BCF    03.5
004E:  BSF    06.2
.................... delay_us(1);  
004F:  NOP
....................  
.................... retval_0 = input(LCD_DB4);  
0050:  BSF    03.5
0051:  BSF    06.4
0052:  BCF    03.5
0053:  BCF    43.0
0054:  BTFSC  06.4
0055:  BSF    43.0
.................... retval_1 = input(LCD_DB5);  
0056:  BSF    03.5
0057:  BSF    06.5
0058:  BCF    03.5
0059:  BCF    43.1
005A:  BTFSC  06.5
005B:  BSF    43.1
.................... retval_2 = input(LCD_DB6);  
005C:  BSF    03.5
005D:  BSF    06.6
005E:  BCF    03.5
005F:  BCF    43.2
0060:  BTFSC  06.6
0061:  BSF    43.2
.................... retval_3 = input(LCD_DB7);  
0062:  BSF    03.5
0063:  BSF    06.7
0064:  BCF    03.5
0065:  BCF    43.3
0066:  BTFSC  06.7
0067:  BSF    43.3
....................    
.................... output_low(LCD_E);  
0068:  BSF    03.5
0069:  BCF    06.2
006A:  BCF    03.5
006B:  BCF    06.2
.................... delay_us(1);  
006C:  NOP
....................      
.................... return(retval);     
006D:  MOVF   43,W
006E:  MOVWF  78
006F:  RETURN
.................... }     
.................... #endif  
....................  
.................... //---------------------------------------  
.................... // Read a byte from the LCD and return it.  
....................  
.................... #ifdef USE_RW_PIN  
.................... int8 lcd_read_byte(void)  
.................... {  
.................... int8 low;  
.................... int8 high;  
....................  
.................... output_high(LCD_RW);  
*
0074:  BSF    03.5
0075:  BCF    06.1
0076:  BCF    03.5
0077:  BSF    06.1
.................... delay_cycles(1);  
0078:  NOP
....................  
.................... high = lcd_read_nibble();  
0079:  CALL   04A
007A:  MOVF   78,W
007B:  MOVWF  42
....................  
.................... low = lcd_read_nibble();  
007C:  CALL   04A
007D:  MOVF   78,W
007E:  MOVWF  41
....................  
.................... return( (high<<4) | low);  
007F:  SWAPF  42,W
0080:  MOVWF  77
0081:  MOVLW  F0
0082:  ANDWF  77,F
0083:  MOVF   77,W
0084:  IORWF  41,W
0085:  MOVWF  78
.................... }  
.................... #endif  
....................  
.................... //----------------------------------------  
.................... // Send a byte to the LCD.  
.................... void lcd_send_byte(int8 address, int8 n)  
.................... {  
.................... output_low(LCD_RS);  
*
0070:  BSF    03.5
0071:  BCF    06.0
0072:  BCF    03.5
0073:  BCF    06.0
....................  
.................... #ifdef USE_RW_PIN  
.................... while(bit_test(lcd_read_byte(),7)) ;  
*
0086:  MOVF   78,W
0087:  MOVWF  41
0088:  BTFSC  41.7
0089:  GOTO   074
.................... #else  
.................... delay_us(60);   
.................... #endif  
....................  
.................... if(address)  
008A:  MOVF   3F,F
008B:  BTFSC  03.2
008C:  GOTO   092
....................    output_high(LCD_RS);  
008D:  BSF    03.5
008E:  BCF    06.0
008F:  BCF    03.5
0090:  BSF    06.0
0091:  GOTO   096
.................... else  
....................    output_low(LCD_RS);  
0092:  BSF    03.5
0093:  BCF    06.0
0094:  BCF    03.5
0095:  BCF    06.0
....................        
....................  delay_cycles(1);  
0096:  NOP
....................  
.................... #ifdef USE_RW_PIN  
.................... output_low(LCD_RW);  
0097:  BSF    03.5
0098:  BCF    06.1
0099:  BCF    03.5
009A:  BCF    06.1
.................... delay_cycles(1);  
009B:  NOP
.................... #endif  
....................  
.................... output_low(LCD_E);  
009C:  BSF    03.5
009D:  BCF    06.2
009E:  BCF    03.5
009F:  BCF    06.2
....................  
.................... lcd_send_nibble(n >> 4);  
00A0:  SWAPF  40,W
00A1:  MOVWF  41
00A2:  MOVLW  0F
00A3:  ANDWF  41,F
00A4:  MOVF   41,W
00A5:  MOVWF  42
00A6:  CALL   021
.................... lcd_send_nibble(n & 0xf);  
00A7:  MOVF   40,W
00A8:  ANDLW  0F
00A9:  MOVWF  41
00AA:  MOVWF  42
00AB:  CALL   021
00AC:  RETURN
.................... }  
.................... //----------------------------  
....................  
.................... void lcd_init(void)  
.................... {  
....................    int8 i;  
....................  
....................    lcd_line = 1;  
00AD:  MOVLW  01
00AE:  MOVWF  20
....................  
....................    output_low(LCD_RS);  
00AF:  BSF    03.5
00B0:  BCF    06.0
00B1:  BCF    03.5
00B2:  BCF    06.0
....................  
....................    #ifdef USE_RW_PIN  
....................       output_low(LCD_RW);  
00B3:  BSF    03.5
00B4:  BCF    06.1
00B5:  BCF    03.5
00B6:  BCF    06.1
....................    #endif  
....................  
....................    output_low(LCD_E);  
00B7:  BSF    03.5
00B8:  BCF    06.2
00B9:  BCF    03.5
00BA:  BCF    06.2
....................  
....................    // Some LCDs require 15 ms minimum delay after  
....................    // power-up.  Others require 30 ms.  I'm going  
....................    // to set it to 35 ms, so it should work with  
....................    // all of them.  
....................    delay_ms(35);           
00BB:  MOVLW  23
00BC:  MOVWF  3B
00BD:  CALL   00C
....................  
....................    for(i=0 ;i < 3; i++)  
00BE:  CLRF   2D
00BF:  MOVF   2D,W
00C0:  SUBLW  02
00C1:  BTFSS  03.0
00C2:  GOTO   0CB
....................    {  
....................       lcd_send_nibble(0x03);  
00C3:  MOVLW  03
00C4:  MOVWF  42
00C5:  CALL   021
....................       delay_ms(5);  
00C6:  MOVLW  05
00C7:  MOVWF  3B
00C8:  CALL   00C
00C9:  INCF   2D,F
00CA:  GOTO   0BF
....................    }  
....................  
....................    lcd_send_nibble(0x02);  
00CB:  MOVLW  02
00CC:  MOVWF  42
00CD:  CALL   021
....................  
....................    for(i=0; i < sizeof(LCD_INIT_STRING); i++)  
00CE:  CLRF   2D
00CF:  MOVF   2D,W
00D0:  SUBLW  03
00D1:  BTFSS  03.0
00D2:  GOTO   0DC
....................    {  
....................       lcd_send_byte(0, LCD_INIT_STRING[i]);  
00D3:  MOVF   2D,W
00D4:  CALL   004
00D5:  MOVWF  2E
00D6:  CLRF   3F
00D7:  MOVF   2E,W
00D8:  MOVWF  40
00D9:  CALL   070
....................      
....................       // If the R/W signal is not used, then  
....................       // the busy bit can't be polled.  One of  
....................       // the init commands takes longer than  
....................       // the hard-coded delay of 50 us, so in  
....................       // that case, lets just do a 5 ms delay  
....................       // after all four of them.  
....................       #ifndef USE_RW_PIN  
00DA:  INCF   2D,F
00DB:  GOTO   0CF
....................          delay_ms(5);  
....................       #endif  
....................    }  
00DC:  BCF    0A.3
00DD:  BCF    0A.4
00DE:  GOTO   3D4 (RETURN)
....................  
.................... }  
....................  
.................... //----------------------------  
....................  
.................... void lcd_gotoxy(int8 x, int8 y)  
.................... {  
.................... int8 address;  
....................  
....................  
.................... switch(y)  
*
023F:  MOVF   3C,W
0240:  XORLW  01
0241:  BTFSC  03.2
0242:  GOTO   24D
0243:  XORLW  03
0244:  BTFSC  03.2
0245:  GOTO   24F
0246:  XORLW  01
0247:  BTFSC  03.2
0248:  GOTO   252
0249:  XORLW  07
024A:  BTFSC  03.2
024B:  GOTO   255
024C:  GOTO   258
....................   {  
....................    case 1:  
....................      address = LCD_LINE_1_ADDRESS;  
024D:  CLRF   3D
....................      break;  
024E:  GOTO   259
....................  
....................    case 2:  
....................      address = LCD_LINE_2_ADDRESS;  
024F:  MOVLW  40
0250:  MOVWF  3D
....................      break;  
0251:  GOTO   259
....................  
....................    case 3:  
....................      address = LCD_LINE_3_ADDRESS;  
0252:  MOVLW  14
0253:  MOVWF  3D
....................      break;  
0254:  GOTO   259
....................  
....................    case 4:  
....................      address = LCD_LINE_4_ADDRESS;  
0255:  MOVLW  54
0256:  MOVWF  3D
....................      break;  
0257:  GOTO   259
....................  
....................    default:  
....................      address = LCD_LINE_1_ADDRESS;  
0258:  CLRF   3D
....................      break;  
....................        
....................   }  
....................  
.................... address += x-1;  
0259:  MOVLW  01
025A:  SUBWF  3B,W
025B:  ADDWF  3D,F
.................... lcd_send_byte(0, 0x80 | address);  
025C:  MOVF   3D,W
025D:  IORLW  80
025E:  MOVWF  3E
025F:  CLRF   3F
0260:  MOVF   3E,W
0261:  MOVWF  40
0262:  CALL   070
0263:  RETURN
.................... }  
....................  
.................... //-----------------------------  
.................... void lcd_putc(char c)  
.................... {  
....................  switch(c)  
*
02B3:  MOVF   3A,W
02B4:  XORLW  0C
02B5:  BTFSC  03.2
02B6:  GOTO   2BE
02B7:  XORLW  06
02B8:  BTFSC  03.2
02B9:  GOTO   2C8
02BA:  XORLW  02
02BB:  BTFSC  03.2
02BC:  GOTO   2CF
02BD:  GOTO   2D4
....................    {  
....................     case '\f':  
....................       lcd_send_byte(0,1);  
02BE:  CLRF   3F
02BF:  MOVLW  01
02C0:  MOVWF  40
02C1:  CALL   070
....................       lcd_line = 1;  
02C2:  MOVLW  01
02C3:  MOVWF  20
....................       delay_ms(2);  
02C4:  MOVLW  02
02C5:  MOVWF  3B
02C6:  CALL   00C
....................       break;  
02C7:  GOTO   2D9
....................      
....................     case '\n':  
....................        lcd_gotoxy(1, ++lcd_line);  
02C8:  INCF   20,F
02C9:  MOVLW  01
02CA:  MOVWF  3B
02CB:  MOVF   20,W
02CC:  MOVWF  3C
02CD:  CALL   23F
....................        break;  
02CE:  GOTO   2D9
....................      
....................     case '\b':  
....................        lcd_send_byte(0,0x10);  
02CF:  CLRF   3F
02D0:  MOVLW  10
02D1:  MOVWF  40
02D2:  CALL   070
....................        break;  
02D3:  GOTO   2D9
....................      
....................     default:  
....................        lcd_send_byte(1,c);  
02D4:  MOVLW  01
02D5:  MOVWF  3F
02D6:  MOVF   3A,W
02D7:  MOVWF  40
02D8:  CALL   070
....................        break;  
....................    }  
02D9:  RETURN
.................... }  
....................  
.................... //------------------------------  
.................... #ifdef USE_RW_PIN  
.................... char lcd_getc(int8 x, int8 y)  
.................... {  
.................... char value;  
....................  
.................... lcd_gotoxy(x,y);  
....................  
.................... // Wait until busy flag is low.  
.................... while(bit_test(lcd_read_byte(),7));   
....................  
.................... output_high(LCD_RS);  
.................... value = lcd_read_byte();  
.................... output_low(LCD_RS);  
....................  
.................... return(value);  
.................... }  
.................... #endif  
....................  
....................  
.................... void main() 
*
03BC:  MOVF   03,W
03BD:  ANDLW  1F
03BE:  MOVWF  03
03BF:  BSF    03.5
03C0:  BSF    1F.0
03C1:  BSF    1F.1
03C2:  BSF    1F.2
03C3:  BCF    1F.3
03C4:  MOVLW  07
03C5:  MOVWF  1C
03C6:  BCF    03.7
.................... { 
....................    //setup_adc_ports(ALL_ANALOG); 
....................    //setup_adc_ports(AN0_AN1_AN2_AN4_AN5_VSS_VREF); 
....................    setup_adc_ports(AN0_AN1_VSS_VREF); 
03C7:  BSF    1F.0
03C8:  BCF    1F.1
03C9:  BSF    1F.2
03CA:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_2); 
03CB:  BCF    1F.6
03CC:  BCF    03.5
03CD:  BCF    1F.6
03CE:  BCF    1F.7
03CF:  BSF    03.5
03D0:  BCF    1F.7
03D1:  BCF    03.5
03D2:  BSF    1F.0
....................    //setup_adc(ADC_CLOCK_INTERNAL); //these two line are for analog vrefl 
....................     
....................    float value; // external value of ADC 
....................    lcd_init(); 
03D3:  GOTO   0AD
....................     
....................    while(TRUE) 
....................    { 
....................  
....................       set_adc_channel(0); 
03D4:  MOVLW  00
03D5:  MOVWF  78
03D6:  MOVF   1F,W
03D7:  ANDLW  C7
03D8:  IORWF  78,W
03D9:  MOVWF  1F
....................        
....................       delay_us(10); 
03DA:  MOVLW  03
03DB:  MOVWF  77
03DC:  DECFSZ 77,F
03DD:  GOTO   3DC
....................        
....................       value = read_adc(); 
03DE:  BSF    1F.2
03DF:  BTFSC  1F.2
03E0:  GOTO   3DF
03E1:  MOVF   1E,W
03E2:  CLRF   2E
03E3:  MOVWF  2D
03E4:  GOTO   0DF
03E5:  MOVF   7A,W
03E6:  MOVWF  24
03E7:  MOVF   79,W
03E8:  MOVWF  23
03E9:  MOVF   78,W
03EA:  MOVWF  22
03EB:  MOVF   77,W
03EC:  MOVWF  21
....................       float temp = value / 255; 
....................       float tmp = temp*5; 
03ED:  MOVF   24,W
03EE:  MOVWF  30
03EF:  MOVF   23,W
03F0:  MOVWF  2F
03F1:  MOVF   22,W
03F2:  MOVWF  2E
03F3:  MOVF   21,W
03F4:  MOVWF  2D
03F5:  CLRF   34
03F6:  CLRF   33
03F7:  MOVLW  7F
03F8:  MOVWF  32
03F9:  MOVLW  86
03FA:  MOVWF  31
03FB:  GOTO   0FE
03FC:  MOVF   7A,W
03FD:  MOVWF  28
03FE:  MOVF   79,W
03FF:  MOVWF  27
0400:  MOVF   78,W
0401:  MOVWF  26
0402:  MOVF   77,W
0403:  MOVWF  25
0404:  MOVF   28,W
0405:  MOVWF  3D
0406:  MOVF   27,W
0407:  MOVWF  3C
0408:  MOVF   26,W
0409:  MOVWF  3B
040A:  MOVF   25,W
040B:  MOVWF  3A
040C:  CLRF   41
040D:  CLRF   40
040E:  MOVLW  20
040F:  MOVWF  3F
0410:  MOVLW  81
0411:  MOVWF  3E
0412:  CALL   1CA
0413:  MOVF   7A,W
0414:  MOVWF  2C
0415:  MOVF   79,W
0416:  MOVWF  2B
0417:  MOVF   78,W
0418:  MOVWF  2A
0419:  MOVF   77,W
041A:  MOVWF  29
....................       lcd_gotoxy(1,1); 
041B:  MOVLW  01
041C:  MOVWF  3B
041D:  MOVWF  3C
041E:  CALL   23F
....................       printf(LCD_PUTC,"%F",tmp); 
041F:  MOVLW  89
0420:  MOVWF  04
0421:  MOVF   2C,W
0422:  MOVWF  30
0423:  MOVF   2B,W
0424:  MOVWF  2F
0425:  MOVF   2A,W
0426:  MOVWF  2E
0427:  MOVF   29,W
0428:  MOVWF  2D
0429:  MOVLW  02
042A:  MOVWF  31
042B:  GOTO   2DA
....................        
....................       delay_ms(100); 
042C:  MOVLW  64
042D:  MOVWF  3B
042E:  CALL   00C
042F:  GOTO   3D4
....................    } 
....................  
.................... } 
0430:  SLEEP

Configuration Fuses:
   Word  1: 2F41   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
