CCS PCM C Compiler, Version 5.048, 5967               22-ге-16 14:58

               Filename:   G:\learning\Micochip\Projects\4-Rs232\Rs232_CCS\main.lst

               ROM used:   452 words (6%)
                           Largest free fragment is 2048
               RAM used:   9 (2%) at main() level
                           22 (6%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   184
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA C8,32
000D:  DATA 6C,36
000E:  DATA 6F,00
000F:  DATA 42,25
0010:  DATA 00,00
*
012E:  MOVF   0B,W
012F:  MOVWF  24
0130:  BCF    0B.7
0131:  BSF    03.5
0132:  BSF    03.6
0133:  BSF    0C.7
0134:  BSF    0C.0
0135:  NOP
0136:  NOP
0137:  BCF    03.5
0138:  BCF    03.6
0139:  BTFSC  24.7
013A:  BSF    0B.7
013B:  BSF    03.6
013C:  MOVF   0C,W
013D:  ANDLW  7F
013E:  BTFSC  03.2
013F:  GOTO   182
0140:  BCF    03.6
0141:  MOVWF  24
0142:  BSF    03.6
0143:  MOVF   0D,W
0144:  BCF    03.6
0145:  MOVWF  25
0146:  BSF    03.6
0147:  MOVF   0F,W
0148:  BCF    03.6
0149:  MOVWF  26
014A:  MOVF   24,W
014B:  MOVWF  27
014C:  CALL   0E4
014D:  MOVF   25,W
014E:  BSF    03.6
014F:  MOVWF  0D
0150:  BCF    03.6
0151:  MOVF   26,W
0152:  BSF    03.6
0153:  MOVWF  0F
0154:  BCF    03.6
0155:  MOVF   0B,W
0156:  MOVWF  27
0157:  BCF    0B.7
0158:  BSF    03.5
0159:  BSF    03.6
015A:  BSF    0C.7
015B:  BSF    0C.0
015C:  NOP
015D:  NOP
015E:  BCF    03.5
015F:  BCF    03.6
0160:  BTFSC  27.7
0161:  BSF    0B.7
0162:  BSF    03.6
0163:  RLF    0C,W
0164:  RLF    0E,W
0165:  ANDLW  7F
0166:  BTFSC  03.2
0167:  GOTO   182
0168:  BCF    03.6
0169:  MOVWF  24
016A:  BSF    03.6
016B:  MOVF   0D,W
016C:  BCF    03.6
016D:  MOVWF  25
016E:  BSF    03.6
016F:  MOVF   0F,W
0170:  BCF    03.6
0171:  MOVWF  26
0172:  MOVF   24,W
0173:  MOVWF  27
0174:  CALL   0E4
0175:  MOVF   25,W
0176:  BSF    03.6
0177:  MOVWF  0D
0178:  BCF    03.6
0179:  MOVF   26,W
017A:  BSF    03.6
017B:  MOVWF  0F
017C:  INCF   0D,F
017D:  BTFSC  03.2
017E:  INCF   0F,F
017F:  BCF    03.6
0180:  GOTO   12E
0181:  BSF    03.6
0182:  BCF    03.6
0183:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=4MHz) 
*
0011:  MOVLW  28
0012:  MOVWF  04
0013:  BCF    03.7
0014:  MOVF   00,W
0015:  BTFSC  03.2
0016:  GOTO   025
0017:  MOVLW  01
0018:  MOVWF  78
0019:  CLRF   77
001A:  DECFSZ 77,F
001B:  GOTO   01A
001C:  DECFSZ 78,F
001D:  GOTO   019
001E:  MOVLW  4A
001F:  MOVWF  77
0020:  DECFSZ 77,F
0021:  GOTO   020
0022:  GOTO   023
0023:  DECFSZ 00,F
0024:  GOTO   017
0025:  RETURN
....................  
....................  
.................... #include "Flex_LCD420.c" 
.................... // Flex_LCD420.c  
....................  
.................... // These pins are for my Microchip PicDem2-Plus board,  
.................... // which I used to test this driver.  
.................... // An external 20x4 LCD is connected to these pins.  
.................... // Change these pins to match your own board's connections.  
....................  
.................... #define LCD_DB4   PIN_B4 
.................... #define LCD_DB5   PIN_B5  
.................... #define LCD_DB6   PIN_B6  
.................... #define LCD_DB7   PIN_B7  
....................  
.................... #define LCD_RS    PIN_B0  
.................... #define LCD_RW    PIN_B1  
.................... #define LCD_E     PIN_B2  
....................  
.................... /*  
.................... // To prove that the driver can be used with random  
.................... // pins, I also tested it with these pins:  
.................... #define LCD_DB4   PIN_D4  
.................... #define LCD_DB5   PIN_B1  
.................... #define LCD_DB6   PIN_C5  
.................... #define LCD_DB7   PIN_B5  
....................  
.................... #define LCD_RS    PIN_E2  
.................... #define LCD_RW    PIN_B2  
.................... #define LCD_E     PIN_D6  
.................... */  
....................  
.................... // If you want only a 6-pin interface to your LCD, then  
.................... // connect the R/W pin on the LCD to ground, and comment  
.................... // out the following line.  Doing so will save one PIC  
.................... // pin, but at the cost of losing the ability to read from  
.................... // the LCD.  It also makes the write time a little longer  
.................... // because a static delay must be used, instead of polling  
.................... // the LCD's busy bit.  Normally a 6-pin interface is only  
.................... // used if you are running out of PIC pins, and you need  
.................... // to use as few as possible for the LCD.  
.................... #define USE_RW_PIN   1       
....................  
....................  
.................... // These are the line addresses for most 4x20 LCDs.  
.................... #define LCD_LINE_1_ADDRESS 0x00  
.................... #define LCD_LINE_2_ADDRESS 0x40  
.................... #define LCD_LINE_3_ADDRESS 0x14  
.................... #define LCD_LINE_4_ADDRESS 0x54  
....................  
.................... // These are the line addresses for LCD's which use  
.................... // the Hitachi HD66712U controller chip.  
.................... /*  
.................... #define LCD_LINE_1_ADDRESS 0x00  
.................... #define LCD_LINE_2_ADDRESS 0x20  
.................... #define LCD_LINE_3_ADDRESS 0x40  
.................... #define LCD_LINE_4_ADDRESS 0x60  
.................... */  
....................  
....................  
.................... //========================================  
....................  
.................... #define lcd_type 2   // 0=5x7, 1=5x10, 2=2 lines(or more)  
....................  
.................... int8 lcd_line ; 
....................  
.................... int8 const LCD_INIT_STRING[4] =  
.................... {  
....................  0x20 | (lcd_type << 2),  // Set mode: 4-bit, 2+ lines, 5x8 dots  
....................  0xc,                     // Display on  
....................  1,                       // Clear display 
....................  6                        // Increment cursor  
....................  };  
....................                                
....................  
.................... //-------------------------------------  
.................... void lcd_send_nibble(int8 nibble)  
.................... {  
.................... // Note:  !! converts an integer expression  
.................... // to a boolean (1 or 0).  
....................  output_bit(LCD_DB4, !!(nibble & 1));  
0026:  BTFSC  2F.0
0027:  GOTO   02A
0028:  BCF    06.4
0029:  GOTO   02B
002A:  BSF    06.4
002B:  BSF    03.5
002C:  BCF    06.4
....................  output_bit(LCD_DB5, !!(nibble & 2));   
002D:  BCF    03.5
002E:  BTFSC  2F.1
002F:  GOTO   032
0030:  BCF    06.5
0031:  GOTO   033
0032:  BSF    06.5
0033:  BSF    03.5
0034:  BCF    06.5
....................  output_bit(LCD_DB6, !!(nibble & 4));     
0035:  BCF    03.5
0036:  BTFSC  2F.2
0037:  GOTO   03A
0038:  BCF    06.6
0039:  GOTO   03B
003A:  BSF    06.6
003B:  BSF    03.5
003C:  BCF    06.6
....................  output_bit(LCD_DB7, !!(nibble & 8));     
003D:  BCF    03.5
003E:  BTFSC  2F.3
003F:  GOTO   042
0040:  BCF    06.7
0041:  GOTO   043
0042:  BSF    06.7
0043:  BSF    03.5
0044:  BCF    06.7
....................  
....................  delay_cycles(1) ; 
0045:  NOP
....................  output_high(LCD_E);  
0046:  BCF    06.2
0047:  BCF    03.5
0048:  BSF    06.2
....................  delay_us(2);  
0049:  GOTO   04A
....................  output_low(LCD_E);  
004A:  BSF    03.5
004B:  BCF    06.2
004C:  BCF    03.5
004D:  BCF    06.2
004E:  RETURN
.................... }  
....................  
.................... //-----------------------------------  
.................... // This sub-routine is only called by lcd_read_byte().  
.................... // It's not a stand-alone routine.  For example, the  
.................... // R/W signal is set high by lcd_read_byte() before  
.................... // this routine is called.       
....................  
.................... #ifdef USE_RW_PIN  
.................... int8 lcd_read_nibble(void)  
.................... {  
.................... int8 retval;  
.................... // Create bit variables so that we can easily set  
.................... // individual bits in the retval variable.  
.................... #bit retval_0 = retval.0  
.................... #bit retval_1 = retval.1  
.................... #bit retval_2 = retval.2  
.................... #bit retval_3 = retval.3  
....................  
.................... retval = 0;  
004F:  CLRF   30
....................      
.................... output_high(LCD_E);  
0050:  BSF    03.5
0051:  BCF    06.2
0052:  BCF    03.5
0053:  BSF    06.2
.................... delay_us(1);  
0054:  NOP
....................  
.................... retval_0 = input(LCD_DB4);  
0055:  BSF    03.5
0056:  BSF    06.4
0057:  BCF    03.5
0058:  BCF    30.0
0059:  BTFSC  06.4
005A:  BSF    30.0
.................... retval_1 = input(LCD_DB5);  
005B:  BSF    03.5
005C:  BSF    06.5
005D:  BCF    03.5
005E:  BCF    30.1
005F:  BTFSC  06.5
0060:  BSF    30.1
.................... retval_2 = input(LCD_DB6);  
0061:  BSF    03.5
0062:  BSF    06.6
0063:  BCF    03.5
0064:  BCF    30.2
0065:  BTFSC  06.6
0066:  BSF    30.2
.................... retval_3 = input(LCD_DB7);  
0067:  BSF    03.5
0068:  BSF    06.7
0069:  BCF    03.5
006A:  BCF    30.3
006B:  BTFSC  06.7
006C:  BSF    30.3
....................    
.................... output_low(LCD_E);  
006D:  BSF    03.5
006E:  BCF    06.2
006F:  BCF    03.5
0070:  BCF    06.2
.................... delay_us(1);  
0071:  NOP
....................      
.................... return(retval);     
0072:  MOVF   30,W
0073:  MOVWF  78
0074:  RETURN
.................... }     
.................... #endif  
....................  
.................... //---------------------------------------  
.................... // Read a byte from the LCD and return it.  
....................  
.................... #ifdef USE_RW_PIN  
.................... int8 lcd_read_byte(void)  
.................... {  
.................... int8 low;  
.................... int8 high;  
....................  
.................... output_high(LCD_RW);  
*
0079:  BSF    03.5
007A:  BCF    06.1
007B:  BCF    03.5
007C:  BSF    06.1
.................... delay_cycles(1);  
007D:  NOP
....................  
.................... high = lcd_read_nibble();  
007E:  CALL   04F
007F:  MOVF   78,W
0080:  MOVWF  2F
....................  
.................... low = lcd_read_nibble();  
0081:  CALL   04F
0082:  MOVF   78,W
0083:  MOVWF  2E
....................  
.................... return( (high<<4) | low);  
0084:  SWAPF  2F,W
0085:  MOVWF  77
0086:  MOVLW  F0
0087:  ANDWF  77,F
0088:  MOVF   77,W
0089:  IORWF  2E,W
008A:  MOVWF  78
.................... }  
.................... #endif  
....................  
.................... //----------------------------------------  
.................... // Send a byte to the LCD.  
.................... void lcd_send_byte(int8 address, int8 n)  
.................... {  
.................... output_low(LCD_RS);  
*
0075:  BSF    03.5
0076:  BCF    06.0
0077:  BCF    03.5
0078:  BCF    06.0
....................  
.................... #ifdef USE_RW_PIN  
.................... while(bit_test(lcd_read_byte(),7)) ;  
*
008B:  MOVF   78,W
008C:  MOVWF  2E
008D:  BTFSC  2E.7
008E:  GOTO   079
.................... #else  
.................... delay_us(60);   
.................... #endif  
....................  
.................... if(address)  
008F:  MOVF   2C,F
0090:  BTFSC  03.2
0091:  GOTO   097
....................    output_high(LCD_RS);  
0092:  BSF    03.5
0093:  BCF    06.0
0094:  BCF    03.5
0095:  BSF    06.0
0096:  GOTO   09B
.................... else  
....................    output_low(LCD_RS);  
0097:  BSF    03.5
0098:  BCF    06.0
0099:  BCF    03.5
009A:  BCF    06.0
....................        
....................  delay_cycles(1);  
009B:  NOP
....................  
.................... #ifdef USE_RW_PIN  
.................... output_low(LCD_RW);  
009C:  BSF    03.5
009D:  BCF    06.1
009E:  BCF    03.5
009F:  BCF    06.1
.................... delay_cycles(1);  
00A0:  NOP
.................... #endif  
....................  
.................... output_low(LCD_E);  
00A1:  BSF    03.5
00A2:  BCF    06.2
00A3:  BCF    03.5
00A4:  BCF    06.2
....................  
.................... lcd_send_nibble(n >> 4);  
00A5:  SWAPF  2D,W
00A6:  MOVWF  2E
00A7:  MOVLW  0F
00A8:  ANDWF  2E,F
00A9:  MOVF   2E,W
00AA:  MOVWF  2F
00AB:  CALL   026
.................... lcd_send_nibble(n & 0xf);  
00AC:  MOVF   2D,W
00AD:  ANDLW  0F
00AE:  MOVWF  2E
00AF:  MOVWF  2F
00B0:  CALL   026
00B1:  RETURN
.................... }  
.................... //----------------------------  
....................  
.................... void lcd_init(void)  
.................... {  
....................    int8 i;  
....................  
....................    lcd_line = 1;  
00B2:  MOVLW  01
00B3:  MOVWF  20
....................  
....................    output_low(LCD_RS);  
00B4:  BSF    03.5
00B5:  BCF    06.0
00B6:  BCF    03.5
00B7:  BCF    06.0
....................  
....................    #ifdef USE_RW_PIN  
....................       output_low(LCD_RW);  
00B8:  BSF    03.5
00B9:  BCF    06.1
00BA:  BCF    03.5
00BB:  BCF    06.1
....................    #endif  
....................  
....................    output_low(LCD_E);  
00BC:  BSF    03.5
00BD:  BCF    06.2
00BE:  BCF    03.5
00BF:  BCF    06.2
....................  
....................    // Some LCDs require 15 ms minimum delay after  
....................    // power-up.  Others require 30 ms.  I'm going  
....................    // to set it to 35 ms, so it should work with  
....................    // all of them.  
....................    delay_ms(35);           
00C0:  MOVLW  23
00C1:  MOVWF  28
00C2:  CALL   011
....................  
....................    for(i=0 ;i < 3; i++)  
00C3:  CLRF   24
00C4:  MOVF   24,W
00C5:  SUBLW  02
00C6:  BTFSS  03.0
00C7:  GOTO   0D0
....................    {  
....................       lcd_send_nibble(0x03);  
00C8:  MOVLW  03
00C9:  MOVWF  2F
00CA:  CALL   026
....................       delay_ms(5);  
00CB:  MOVLW  05
00CC:  MOVWF  28
00CD:  CALL   011
00CE:  INCF   24,F
00CF:  GOTO   0C4
....................    }  
....................  
....................    lcd_send_nibble(0x02);  
00D0:  MOVLW  02
00D1:  MOVWF  2F
00D2:  CALL   026
....................  
....................    for(i=0; i < sizeof(LCD_INIT_STRING); i++)  
00D3:  CLRF   24
00D4:  MOVF   24,W
00D5:  SUBLW  03
00D6:  BTFSS  03.0
00D7:  GOTO   0E1
....................    {  
....................       lcd_send_byte(0, LCD_INIT_STRING[i]);  
00D8:  MOVF   24,W
00D9:  CALL   004
00DA:  MOVWF  25
00DB:  CLRF   2C
00DC:  MOVF   25,W
00DD:  MOVWF  2D
00DE:  CALL   075
....................      
....................       // If the R/W signal is not used, then  
....................       // the busy bit can't be polled.  One of  
....................       // the init commands takes longer than  
....................       // the hard-coded delay of 50 us, so in  
....................       // that case, lets just do a 5 ms delay  
....................       // after all four of them.  
....................       #ifndef USE_RW_PIN  
00DF:  INCF   24,F
00E0:  GOTO   0D4
....................          delay_ms(5);  
....................       #endif  
....................    }  
00E1:  BCF    0A.3
00E2:  BCF    0A.4
00E3:  GOTO   19B (RETURN)
....................  
.................... }  
....................  
.................... //----------------------------  
....................  
.................... void lcd_gotoxy(int8 x, int8 y)  
.................... {  
.................... int8 address;  
....................  
....................  
.................... switch(y)  
*
00FE:  MOVF   29,W
00FF:  XORLW  01
0100:  BTFSC  03.2
0101:  GOTO   10C
0102:  XORLW  03
0103:  BTFSC  03.2
0104:  GOTO   10E
0105:  XORLW  01
0106:  BTFSC  03.2
0107:  GOTO   111
0108:  XORLW  07
0109:  BTFSC  03.2
010A:  GOTO   114
010B:  GOTO   117
....................   {  
....................    case 1:  
....................      address = LCD_LINE_1_ADDRESS;  
010C:  CLRF   2A
....................      break;  
010D:  GOTO   118
....................  
....................    case 2:  
....................      address = LCD_LINE_2_ADDRESS;  
010E:  MOVLW  40
010F:  MOVWF  2A
....................      break;  
0110:  GOTO   118
....................  
....................    case 3:  
....................      address = LCD_LINE_3_ADDRESS;  
0111:  MOVLW  14
0112:  MOVWF  2A
....................      break;  
0113:  GOTO   118
....................  
....................    case 4:  
....................      address = LCD_LINE_4_ADDRESS;  
0114:  MOVLW  54
0115:  MOVWF  2A
....................      break;  
0116:  GOTO   118
....................  
....................    default:  
....................      address = LCD_LINE_1_ADDRESS;  
0117:  CLRF   2A
....................      break;  
....................        
....................   }  
....................  
.................... address += x-1;  
0118:  MOVLW  01
0119:  SUBWF  28,W
011A:  ADDWF  2A,F
.................... lcd_send_byte(0, 0x80 | address);  
011B:  MOVF   2A,W
011C:  IORLW  80
011D:  MOVWF  2B
011E:  CLRF   2C
011F:  MOVF   2B,W
0120:  MOVWF  2D
0121:  CALL   075
.................... }  
....................  
.................... //-----------------------------  
.................... void lcd_putc(char c)  
.................... {  
....................  switch(c)  
*
00E4:  MOVF   27,W
00E5:  XORLW  0C
00E6:  BTFSC  03.2
00E7:  GOTO   0EF
00E8:  XORLW  06
00E9:  BTFSC  03.2
00EA:  GOTO   0F9
00EB:  XORLW  02
00EC:  BTFSC  03.2
00ED:  GOTO   123
00EE:  GOTO   128
....................    {  
....................     case '\f':  
....................       lcd_send_byte(0,1);  
00EF:  CLRF   2C
00F0:  MOVLW  01
00F1:  MOVWF  2D
00F2:  CALL   075
....................       lcd_line = 1;  
00F3:  MOVLW  01
00F4:  MOVWF  20
....................       delay_ms(2);  
00F5:  MOVLW  02
00F6:  MOVWF  28
00F7:  CALL   011
....................       break;  
00F8:  GOTO   12D
....................      
....................     case '\n':  
....................        lcd_gotoxy(1, ++lcd_line);  
00F9:  INCF   20,F
00FA:  MOVLW  01
00FB:  MOVWF  28
00FC:  MOVF   20,W
00FD:  MOVWF  29
....................        break;  
*
0122:  GOTO   12D
....................      
....................     case '\b':  
....................        lcd_send_byte(0,0x10);  
0123:  CLRF   2C
0124:  MOVLW  10
0125:  MOVWF  2D
0126:  CALL   075
....................        break;  
0127:  GOTO   12D
....................      
....................     default:  
....................        lcd_send_byte(1,c);  
0128:  MOVLW  01
0129:  MOVWF  2C
012A:  MOVF   27,W
012B:  MOVWF  2D
012C:  CALL   075
....................        break;  
....................    }  
012D:  RETURN
.................... }  
....................  
.................... //------------------------------  
.................... #ifdef USE_RW_PIN  
.................... char lcd_getc(int8 x, int8 y)  
.................... {  
.................... char value;  
....................  
.................... lcd_gotoxy(x,y);  
....................  
.................... // Wait until busy flag is low.  
.................... while(bit_test(lcd_read_byte(),7));   
....................  
.................... output_high(LCD_RS);  
.................... value = lcd_read_byte();  
.................... output_low(LCD_RS);  
....................  
.................... return(value);  
.................... }  
.................... #endif  
....................  
.................... #USE RS232(BAUD=9600, xmit=PIN_C6, rcv=PIN_C7,STREAM=COM_A) 
.................... //#USE RS232(BAUD=9600, xmit=PIN_C1, rcv=PIN_C2,STREAM=COM_b) 
....................  
.................... void main() 
*
0184:  MOVF   03,W
0185:  ANDLW  1F
0186:  MOVWF  03
0187:  MOVLW  19
0188:  BSF    03.5
0189:  MOVWF  19
018A:  MOVLW  A6
018B:  MOVWF  18
018C:  MOVLW  90
018D:  BCF    03.5
018E:  MOVWF  18
018F:  CLRF   22
0190:  CLRF   21
0191:  BSF    03.5
0192:  BSF    1F.0
0193:  BSF    1F.1
0194:  BSF    1F.2
0195:  BCF    1F.3
0196:  MOVLW  07
0197:  MOVWF  1C
0198:  BCF    03.7
.................... { 
....................    lcd_init(); //initialize our lcd 
0199:  BCF    03.5
019A:  GOTO   0B2
....................    char c; 
....................    //char s[50]; 
....................     
....................     
....................     
....................    while(TRUE) 
....................    { 
....................       c = fgetc(COM_A); // method for getting char data from terminal 
019B:  BTFSS  0C.5
019C:  GOTO   19B
019D:  MOVF   1A,W
019E:  MOVWF  23
....................       //fgets(s,COM_A); // getting string data from terminal 
....................       //lcd_gotoxy(1,1); 
....................       //printf(LCD_PUTC," %C ",c); 
....................       //printf(LCD_PUTC," %S ",s); 
....................       if(c=='h') 
019F:  MOVF   23,W
01A0:  SUBLW  68
01A1:  BTFSS  03.2
01A2:  GOTO   1B1
....................       { 
....................          //puts("HELLO"); // default method for put data into terminal 
....................          //fputs("HELLO",COM_A); // method with argument to choose com 
....................          printf(LCD_PUTC," %S ","Hello"); 
01A3:  MOVLW  20
01A4:  MOVWF  27
01A5:  CALL   0E4
01A6:  MOVLW  0C
01A7:  BSF    03.6
01A8:  MOVWF  0D
01A9:  MOVLW  00
01AA:  MOVWF  0F
01AB:  BCF    03.6
01AC:  CALL   12E
01AD:  MOVLW  20
01AE:  MOVWF  27
01AF:  CALL   0E4
....................       } 
01B0:  GOTO   1C2
....................       else if(c=='b') 
01B1:  MOVF   23,W
01B2:  SUBLW  62
01B3:  BTFSS  03.2
01B4:  GOTO   1C2
....................       { 
....................          printf(LCD_PUTC," %S ","BJ"); 
01B5:  MOVLW  20
01B6:  MOVWF  27
01B7:  CALL   0E4
01B8:  MOVLW  0F
01B9:  BSF    03.6
01BA:  MOVWF  0D
01BB:  MOVLW  00
01BC:  MOVWF  0F
01BD:  BCF    03.6
01BE:  CALL   12E
01BF:  MOVLW  20
01C0:  MOVWF  27
01C1:  CALL   0E4
....................       } 
01C2:  GOTO   19B
....................        
....................    } 
....................  
.................... } 
01C3:  SLEEP

Configuration Fuses:
   Word  1: 2F41   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
